{"ast":null,"code":"'use strict';\n\nconst Document = require('../document');\n\nconst EmbeddedDocument = require('./embedded');\n\nconst MongooseError = require('../error/mongooseError');\n\nconst ObjectId = require('./objectid');\n\nconst cleanModifiedSubpaths = require('../helpers/document/cleanModifiedSubpaths');\n\nconst get = require('../helpers/get');\n\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nconst utils = require('../utils');\n\nconst util = require('util');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\nconst _basePush = Array.prototype.push;\nconst validatorsSymbol = Symbol('mongoose#MongooseCoreArray#validators');\n/*!\n * ignore\n */\n\nclass CoreMongooseArray extends Array {\n  get isMongooseArray() {\n    return true;\n  }\n\n  get validators() {\n    return this[validatorsSymbol];\n  }\n\n  set validators(v) {\n    this[validatorsSymbol] = v;\n  }\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol]);\n    let i = keys.length;\n    const opts = Object.assign({}, internalToObjectOptions, {\n      _isNested: true\n    });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op]; // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = {\n          $each: val\n        };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  }\n  /*!\n   * ignore\n   */\n\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  }\n  /*!\n   * ignore\n   */\n\n\n  $parent() {\n    return this[arrayParentSymbol];\n  }\n  /*!\n   * ignore\n   */\n\n\n  $path() {\n    return this[arrayPathSymbol];\n  }\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n\n    this._markModified(); // only allow shifting once\n\n\n    if (this._shifted) {\n      return;\n    }\n\n    this._shifted = true;\n    return [].shift.call(this);\n  }\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n\n    this._markModified(); // only allow popping once\n\n\n    if (this._popped) {\n      return;\n    }\n\n    this._popped = true;\n    return [].pop.call(this);\n  }\n  /*!\n   * ignore\n   */\n\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  }\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    if (this[arrayParentSymbol]) {\n      populated = this[arrayParentSymbol].populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol]; // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n\n      if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n        value = {\n          _id: value\n        };\n      } // gh-2399\n      // we should cast model only when it's not a discriminator\n\n\n      const isDisc = value.schema && value.schema.discriminatorMapping && value.schema.discriminatorMapping.key !== undefined;\n\n      if (!isDisc) {\n        value = new Model(value);\n      }\n\n      return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], false);\n  }\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  }\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          dirtyPath = dirtyPath + '.' + this.indexOf(elem) + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = {\n        $set: val\n      };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n\n      this._markModified();\n\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol]; // reset pop/shift after save\n\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n\n      this[arrayParentSymbol].once('save', function () {\n        _this._popped = _this._shifted = null;\n      });\n    } // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n\n\n    if (this[arrayAtomicsSymbol].$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = {\n        $set: this\n      };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function (v) {\n          return v.toObject({\n            transform: false,\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {\n          $in: []\n        });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || {\n        $each: []\n      };\n\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  }\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    values.forEach(function (v) {\n      let found;\n      const val = +v;\n\n      switch (type) {\n        case 'doc':\n          found = this.some(function (doc) {\n            return doc.equals(v);\n          });\n          break;\n\n        case 'date':\n          found = this.some(function (d) {\n            return +d === val;\n          });\n          break;\n\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n\n        this._registerAtomic('$addToSet', v);\n\n        this._markModified();\n\n        [].push.call(added, v);\n      }\n    }, this);\n    return added;\n  }\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  }\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  }\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n\n  indexOf(obj, fromIndex) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n\n  inspect() {\n    return JSON.stringify(this);\n  }\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    const ret = [].push.apply(this, values);\n\n    this._registerAtomic('$set', this);\n\n    this._markModified();\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n\n  pop() {\n    const ret = [].pop.call(this);\n\n    this._registerAtomic('$set', this);\n\n    this._markModified();\n\n    return ret;\n  }\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n\n    while (i--) {\n      mem = cur[i];\n\n      if (mem instanceof Document) {\n        const some = values.some(function (v) {\n          return mem.equals(v);\n        });\n\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function (v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified(); // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n\n\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  }\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null && utils.hasUserDefinedProperty(values[0], '$each');\n\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined, undefined, {\n      skipDocumentArrayCast: true\n    });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if (get(atomics, '$push.$each.length', 0) > 0 && atomics.$push.$position != atomics.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(this, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(this, values);\n      }\n    } else {\n      if (get(atomics, '$push.$each.length', 0) > 0 && atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n\n      atomic = values;\n      ret = [].push.apply(this, values);\n    }\n\n    this._registerAtomic('$push', atomic);\n\n    this._markModified();\n\n    return ret;\n  }\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  }\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n\n  set(i, val) {\n    const value = this._cast(val, i);\n\n    this[i] = value;\n\n    this._markModified(i);\n\n    return this;\n  }\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n\n  shift() {\n    const ret = [].shift.call(this);\n\n    this._registerAtomic('$set', this);\n\n    this._markModified();\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n\n  sort() {\n    const ret = [].sort.apply(this, arguments);\n\n    this._registerAtomic('$set', this);\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n\n  splice() {\n    let ret;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ? arguments[i] : this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(this, vals);\n\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  }\n  /*!\n   * ignore\n   */\n\n\n  slice() {\n    const ret = super.slice.apply(this, arguments);\n    ret[arrayParentSymbol] = this[arrayParentSymbol];\n    ret[arraySchemaSymbol] = this[arraySchemaSymbol];\n    ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];\n    ret[slicedSymbol] = true;\n    return ret;\n  }\n  /*!\n   * ignore\n   */\n\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n\n  toObject(options) {\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      return this.map(function (doc) {\n        return doc instanceof Document ? doc.toObject(options) : doc;\n      });\n    }\n\n    return this.slice();\n  }\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n\n    [].unshift.apply(this, values);\n\n    this._registerAtomic('$set', this);\n\n    this._markModified();\n\n    return this.length;\n  }\n\n}\n\nif (util.inspect.custom) {\n  CoreMongooseArray.prototype[util.inspect.custom] = CoreMongooseArray.prototype.inspect;\n}\n/*!\n * ignore\n */\n\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n\n    const model = arg.constructor;\n\n    if (!(arg instanceof Document) || model.modelName !== ref && model.baseModelName !== ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*!\n * ignore\n */\n\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ? null : get(arr[arraySchemaSymbol], 'caster.options.ref', null);\n\n  if (arr.length === 0 && docs.length > 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nmodule.exports = CoreMongooseArray;","map":{"version":3,"names":["Document","require","EmbeddedDocument","MongooseError","ObjectId","cleanModifiedSubpaths","get","internalToObjectOptions","utils","util","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","populateModelSymbol","slicedSymbol","Symbol","_basePush","Array","prototype","push","validatorsSymbol","CoreMongooseArray","isMongooseArray","validators","v","$__getAtomics","ret","keys","Object","i","length","opts","assign","_isNested","toObject","op","val","isMongooseObject","isArray","call","$each","valueOf","$atomics","$parent","$path","$shift","_registerAtomic","_markModified","_shifted","shift","$pop","_popped","pop","$schema","_cast","value","populated","Model","undefined","options","Buffer","isBuffer","isObject","_id","isDisc","schema","discriminatorMapping","key","caster","applySetters","_mapCast","index","elem","embeddedPath","parent","dirtyPath","arguments","indexOf","endsWith","markModified","$set","atomics","_this","once","selector","concat","pullOp","apply","map","transform","virtuals","$in","$push","hasUserDefinedProperty","addToSet","_checkManualPopulation","values","added","type","Date","forEach","found","some","doc","equals","d","hasAtomics","isPOJO","includes","obj","fromIndex","toString","len","inspect","JSON","stringify","nonAtomicPush","pull","cur","mem","splice","$__getValue","atomic","isOverwrite","skipDocumentArrayCast","$position","remove","set","sort","slice","vals","toBSON","depopulate","clone","unshift","custom","_isAllSubdocs","docs","ref","arg","model","constructor","modelName","baseModelName","arr","module","exports"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/types/core_array.js"],"sourcesContent":["'use strict';\n\nconst Document = require('../document');\nconst EmbeddedDocument = require('./embedded');\nconst MongooseError = require('../error/mongooseError');\nconst ObjectId = require('./objectid');\nconst cleanModifiedSubpaths = require('../helpers/document/cleanModifiedSubpaths');\nconst get = require('../helpers/get');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\nconst util = require('util');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\n\nconst _basePush = Array.prototype.push;\n\nconst validatorsSymbol = Symbol('mongoose#MongooseCoreArray#validators');\n\n/*!\n * ignore\n */\n\nclass CoreMongooseArray extends Array {\n  get isMongooseArray() {\n    return true;\n  }\n\n  get validators() {\n    return this[validatorsSymbol];\n  }\n\n  set validators(v) {\n    this[validatorsSymbol] = v;\n  }\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol]);\n    let i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = { $each: val };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  }\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  }\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  }\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  }\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  }\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    if (this[arrayParentSymbol]) {\n      populated = this[arrayParentSymbol].populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, this[arrayParentSymbol], false);\n  }\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  }\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          dirtyPath = dirtyPath + '.' + this.indexOf(elem) + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  }\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = { $set: val };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this[arrayAtomicsSymbol].$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = { $set: this };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({ transform: false, virtuals: false });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    values.forEach(function(v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  }\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  }\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  }\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null &&\n      utils.hasUserDefinedProperty(values[0], '$each');\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined,\n      undefined, { skipDocumentArrayCast: true });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if (get(atomics, '$push.$each.length', 0) > 0 &&\n          atomics.$push.$position != atomics.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(this, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(this, values);\n      }\n    } else {\n      if (get(atomics, '$push.$each.length', 0) > 0 &&\n          atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n      atomic = values;\n      ret = [].push.apply(this, values);\n    }\n    this._registerAtomic('$push', atomic);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  }\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val) {\n    const value = this._cast(val, i);\n    this[i] = value;\n    this._markModified(i);\n    return this;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ?\n            arguments[i] :\n            this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  slice() {\n    const ret = super.slice.apply(this, arguments);\n    ret[arrayParentSymbol] = this[arrayParentSymbol];\n    ret[arraySchemaSymbol] = this[arraySchemaSymbol];\n    ret[arrayAtomicsSymbol] = this[arrayAtomicsSymbol];\n    ret[slicedSymbol] = true;\n    return ret;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      return this.map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return this.slice();\n  }\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  }\n}\n\nif (util.inspect.custom) {\n  CoreMongooseArray.prototype[util.inspect.custom] =\n    CoreMongooseArray.prototype.inspect;\n}\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ?\n    null :\n    get(arr[arraySchemaSymbol], 'caster.options.ref', null);\n  if (arr.length === 0 &&\n      docs.length > 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nmodule.exports = CoreMongooseArray;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}