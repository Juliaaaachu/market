{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CoreMongooseArray = require('./core_array');\n\nconst Document = require('../document');\n\nconst ObjectId = require('./objectid');\n\nconst castObjectId = require('../cast/objectid');\n\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\n\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nconst util = require('util');\n\nconst utils = require('../utils');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\nconst _basePush = Array.prototype.push;\n\nclass CoreDocumentArray extends CoreMongooseArray {\n  get isMongooseDocumentArray() {\n    return true;\n  }\n  /*!\n   * ignore\n   */\n\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n  /*!\n   * ignore\n   */\n\n\n  map() {\n    const ret = super.map.apply(this, arguments);\n    ret[arraySchemaSymbol] = null;\n    ret[arrayPathSymbol] = null;\n    ret[arrayParentSymbol] = null;\n    return ret;\n  }\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ? value && value.isMongooseDocumentArray : value instanceof Constructor;\n\n    if (isInstance || // Hack re: #5001, see #5005\n    value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    } // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n\n\n    if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n      value = {\n        _id: value\n      };\n    }\n\n    if (value && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, value[Constructor.schema.options.discriminatorKey]);\n\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n\n    return new Constructor(value, this, undefined, undefined, index);\n  }\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  id(id) {\n    let casted;\n    let sid;\n\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function (doc) {\n      if (doc == null) {\n        return null;\n      }\n\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n\n      return doc.toObject(options);\n    }));\n  }\n\n  slice() {\n    const arr = super.slice.apply(this, arguments);\n    arr[arrayParentSymbol] = this[arrayParentSymbol];\n    arr[arrayPathSymbol] = this[arrayPathSymbol];\n    return arr;\n  }\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n\n  push() {\n    const ret = super.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n\n  pull() {\n    const ret = super.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n\n  shift() {\n    const ret = super.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n\n  splice() {\n    const ret = super.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  inspect() {\n    return this.toObject();\n  }\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n\n    if (obj && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, obj[Constructor.schema.options.discriminatorKey]);\n\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  }\n  /*!\n   * ignore\n   */\n\n\n  notify(event) {\n    const _this = this;\n\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  }\n\n}\n\nif (util.inspect.custom) {\n  CoreDocumentArray.prototype[util.inspect.custom] = CoreDocumentArray.prototype.inspect;\n}\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n  const populatedPaths = Object.keys(parent.$__.populated).filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.populated(remnant));\n  }\n}\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\n\nfunction MongooseDocumentArray(values, path, doc) {\n  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreDocumentArray();\n  arr[arrayAtomicsSymbol] = {};\n  arr[arraySchemaSymbol] = void 0;\n\n  if (Array.isArray(values)) {\n    if (values instanceof CoreDocumentArray && values[arrayPathSymbol] === path && values[arrayParentSymbol] === doc) {\n      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n\n  arr[arrayPathSymbol] = path; // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path); // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n\n    while (arr != null && arr[arraySchemaSymbol] != null && arr[arraySchemaSymbol].$isMongooseArray && !arr[arraySchemaSymbol].$isMongooseDocumentArray) {\n      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  return arr;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = MongooseDocumentArray;","map":{"version":3,"names":["CoreMongooseArray","require","Document","ObjectId","castObjectId","getDiscriminatorByValue","internalToObjectOptions","util","utils","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","documentArrayParent","_basePush","Array","prototype","push","CoreDocumentArray","isMongooseDocumentArray","toBSON","toObject","map","ret","apply","arguments","_cast","value","index","Constructor","casterConstructor","isInstance","$isMongooseDocumentArray","constructor","baseCasterConstructor","__parentArray","$setIndex","undefined","Buffer","isBuffer","isObject","_id","discriminators","schema","options","discriminatorKey","constructorByValue","cast","id","casted","sid","toString","e","val","get","String","deepEqual","concat","doc","slice","arr","_updateParentPopulated","pull","shift","splice","inspect","create","obj","notify","event","_this","_arr","i","length","isMongooseArray","emit","custom","parent","$__","populated","populatedPaths","Object","keys","filter","p","startsWith","path","remnant","isArray","MongooseDocumentArray","values","assign","forEach","v","call","$isMongooseArray","module","exports"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/types/documentarray.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CoreMongooseArray = require('./core_array');\nconst Document = require('../document');\nconst ObjectId = require('./objectid');\nconst castObjectId = require('../cast/objectid');\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst util = require('util');\nconst utils = require('../utils');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\nconst _basePush = Array.prototype.push;\n\nclass CoreDocumentArray extends CoreMongooseArray {\n  get isMongooseDocumentArray() {\n    return true;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /*!\n   * ignore\n   */\n\n  map() {\n    const ret = super.map.apply(this, arguments);\n    ret[arraySchemaSymbol] = null;\n    ret[arrayPathSymbol] = null;\n    ret[arrayParentSymbol] = null;\n\n    return ret;\n  }\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ?\n      value && value.isMongooseDocumentArray :\n      value instanceof Constructor;\n    if (isInstance ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = { _id: value };\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    return new Constructor(value, this, undefined, undefined, index);\n  }\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     const embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n\n      _id = val.get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function(doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  }\n\n  slice() {\n    const arr = super.slice.apply(this, arguments);\n    arr[arrayParentSymbol] = this[arrayParentSymbol];\n    arr[arrayPathSymbol] = this[arrayPathSymbol];\n\n    return arr;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = super.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = super.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n  shift() {\n    const ret = super.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n  splice() {\n    const ret = super.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  }\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  }\n}\n\nif (util.inspect.custom) {\n  CoreDocumentArray.prototype[util.inspect.custom] =\n    CoreDocumentArray.prototype.inspect;\n}\n\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n\n  const populatedPaths = Object.keys(parent.$__.populated).\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.populated(remnant));\n  }\n}\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreDocumentArray();\n\n  arr[arrayAtomicsSymbol] = {};\n  arr[arraySchemaSymbol] = void 0;\n  if (Array.isArray(values)) {\n    if (values instanceof CoreDocumentArray &&\n        values[arrayPathSymbol] === path &&\n        values[arrayParentSymbol] === doc) {\n      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n\n    // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n    while (arr != null &&\n        arr[arraySchemaSymbol] != null &&\n        arr[arraySchemaSymbol].$isMongooseArray &&\n        !arr[arraySchemaSymbol].$isMongooseDocumentArray) {\n      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}