{"ast":null,"code":"'use strict';\n\nconst StrictModeError = require('../../error/strict');\n/*!\n * ignore\n */\n\n\nmodule.exports = function (schematype) {\n  if (schematype.$immutable) {\n    schematype.$immutableSetter = createImmutableSetter(schematype.path, schematype.options.immutable);\n    schematype.set(schematype.$immutableSetter);\n  } else if (schematype.$immutableSetter) {\n    schematype.setters = schematype.setters.filter(fn => fn !== schematype.$immutableSetter);\n    delete schematype.$immutableSetter;\n  }\n};\n\nfunction createImmutableSetter(path, immutable) {\n  return function immutableSetter(v) {\n    if (this == null || this.$__ == null) {\n      return v;\n    }\n\n    if (this.isNew) {\n      return v;\n    }\n\n    const _immutable = typeof immutable === 'function' ? immutable.call(this, this) : immutable;\n\n    if (!_immutable) {\n      return v;\n    }\n\n    const _value = this.$__getValue(path);\n\n    if (this.$__.strictMode === 'throw' && v !== _value) {\n      throw new StrictModeError(path, 'Path `' + path + '` is immutable ' + 'and strict mode is set to throw.', true);\n    }\n\n    return _value;\n  };\n}","map":{"version":3,"names":["StrictModeError","require","module","exports","schematype","$immutable","$immutableSetter","createImmutableSetter","path","options","immutable","set","setters","filter","fn","immutableSetter","v","$__","isNew","_immutable","call","_value","$__getValue","strictMode"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/helpers/schematype/handleImmutable.js"],"sourcesContent":["'use strict';\n\nconst StrictModeError = require('../../error/strict');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schematype) {\n  if (schematype.$immutable) {\n    schematype.$immutableSetter = createImmutableSetter(schematype.path,\n      schematype.options.immutable);\n    schematype.set(schematype.$immutableSetter);\n  } else if (schematype.$immutableSetter) {\n    schematype.setters = schematype.setters.\n      filter(fn => fn !== schematype.$immutableSetter);\n    delete schematype.$immutableSetter;\n  }\n};\n\nfunction createImmutableSetter(path, immutable) {\n  return function immutableSetter(v) {\n    if (this == null || this.$__ == null) {\n      return v;\n    }\n    if (this.isNew) {\n      return v;\n    }\n\n    const _immutable = typeof immutable === 'function' ?\n      immutable.call(this, this) :\n      immutable;\n    if (!_immutable) {\n      return v;\n    }\n\n    const _value = this.$__getValue(path);\n    if (this.$__.strictMode === 'throw' && v !== _value) {\n      throw new StrictModeError(path, 'Path `' + path + '` is immutable ' +\n        'and strict mode is set to throw.', true);\n    }\n\n    return _value;\n  };\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAA/B;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqB;EACpC,IAAIA,UAAU,CAACC,UAAf,EAA2B;IACzBD,UAAU,CAACE,gBAAX,GAA8BC,qBAAqB,CAACH,UAAU,CAACI,IAAZ,EACjDJ,UAAU,CAACK,OAAX,CAAmBC,SAD8B,CAAnD;IAEAN,UAAU,CAACO,GAAX,CAAeP,UAAU,CAACE,gBAA1B;EACD,CAJD,MAIO,IAAIF,UAAU,CAACE,gBAAf,EAAiC;IACtCF,UAAU,CAACQ,OAAX,GAAqBR,UAAU,CAACQ,OAAX,CACnBC,MADmB,CACZC,EAAE,IAAIA,EAAE,KAAKV,UAAU,CAACE,gBADZ,CAArB;IAEA,OAAOF,UAAU,CAACE,gBAAlB;EACD;AACF,CAVD;;AAYA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCE,SAArC,EAAgD;EAC9C,OAAO,SAASK,eAAT,CAAyBC,CAAzB,EAA4B;IACjC,IAAI,QAAQ,IAAR,IAAgB,KAAKC,GAAL,IAAY,IAAhC,EAAsC;MACpC,OAAOD,CAAP;IACD;;IACD,IAAI,KAAKE,KAAT,EAAgB;MACd,OAAOF,CAAP;IACD;;IAED,MAAMG,UAAU,GAAG,OAAOT,SAAP,KAAqB,UAArB,GACjBA,SAAS,CAACU,IAAV,CAAe,IAAf,EAAqB,IAArB,CADiB,GAEjBV,SAFF;;IAGA,IAAI,CAACS,UAAL,EAAiB;MACf,OAAOH,CAAP;IACD;;IAED,MAAMK,MAAM,GAAG,KAAKC,WAAL,CAAiBd,IAAjB,CAAf;;IACA,IAAI,KAAKS,GAAL,CAASM,UAAT,KAAwB,OAAxB,IAAmCP,CAAC,KAAKK,MAA7C,EAAqD;MACnD,MAAM,IAAIrB,eAAJ,CAAoBQ,IAApB,EAA0B,WAAWA,IAAX,GAAkB,iBAAlB,GAC9B,kCADI,EACgC,IADhC,CAAN;IAED;;IAED,OAAOa,MAAP;EACD,CAtBD;AAuBD"},"metadata":{},"sourceType":"script"}