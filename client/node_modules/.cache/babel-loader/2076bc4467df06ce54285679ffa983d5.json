{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = require('../schematype');\n\nconst MongooseError = require('../error/index');\n\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\n\nconst castString = require('../cast/string');\n\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst CastError = SchemaType.CastError;\nlet Document;\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaString.schemaName = 'String';\nSchemaString.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * ####Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = v => {\n      if (v != null && typeof v !== 'string') {\n        throw new Error();\n      }\n\n      return v;\n    };\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/**\n * Attaches a getter for all String instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\n\nSchemaString.get = SchemaType.get;\n/**\n * Sets a default option for all String instances.\n *\n * ####Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n  return this;\n};\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.lowercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.toLowerCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.uppercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.toUpperCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.trim = function (shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.trim();\n    }\n\n    return v;\n  });\n};\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function (v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function (v) {\n    if (!regExp) {\n      return false;\n    } // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n\n\n    regExp.lastIndex = 0;\n    const ret = v != null && v !== '' ? regExp.test(v) : true;\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to String\n *\n * @api private\n */\n\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path, null, this);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    const ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  const castString = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaString.cast();\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.castForQuery(m);\n  });\n}\n\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: String,\n  $regex: handleSingle,\n  $not: handleSingle\n});\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaString;","map":{"version":3,"names":["SchemaType","require","MongooseError","SchemaStringOptions","castString","utils","populateModelSymbol","CastError","Document","SchemaString","key","options","enumValues","regExp","call","schemaName","defaultOptions","prototype","Object","create","constructor","defineProperty","configurable","enumerable","writable","value","_cast","cast","caster","arguments","length","v","Error","get","set","_checkRequired","String","checkRequired","enum","enumValidator","validators","filter","validator","values","errorMessage","isObject","message","messages","undefined","push","vals","indexOf","type","lowercase","shouldApply","self","toLowerCase","uppercase","toUpperCase","trim","shouldTrim","minlength","minlengthValidator","msg","replace","maxlength","maxlengthValidator","match","matchValidator","lastIndex","ret","test","regexp","doc","_isRef","init","$__","wasPopulated","Buffer","isBuffer","path","$__fullPath","owner","ownerDocument","pop","populated","error","handleSingle","val","castForQuery","handleArray","_this","Array","isArray","map","m","$conditionalHandlers","$all","$gt","$gte","$lt","$lte","$options","$regex","$not","freeze","$conditional","handler","toString","_castForQuery","module","exports"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/schema/string.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = require('../schematype');\nconst MongooseError = require('../error/index');\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\nconst castString = require('../cast/string');\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\nSchemaString.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * ####Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => {\n      if (v != null && typeof v !== 'string') {\n        throw new Error();\n      }\n      return v;\n    };\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/**\n * Attaches a getter for all String instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\n * Sets a default option for all String instances.\n *\n * ####Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * ####Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n\n    const ret = ((v != null && v !== '')\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path, null, this);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    const ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  const castString = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaString.cast();\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: String,\n  $regex: handleSingle,\n  $not: handleSingle\n});\n\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,gCAAD,CAAnC;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,gBAAD,CAA1B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAMK,mBAAmB,GAAGL,OAAO,CAAC,oBAAD,CAAP,CAA8BK,mBAA1D;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAACO,SAA7B;AACA,IAAIC,QAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;EAClC,KAAKC,UAAL,GAAkB,EAAlB;EACA,KAAKC,MAAL,GAAc,IAAd;EACAb,UAAU,CAACc,IAAX,CAAgB,IAAhB,EAAsBJ,GAAtB,EAA2BC,OAA3B,EAAoC,QAApC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAF,YAAY,CAACM,UAAb,GAA0B,QAA1B;AAEAN,YAAY,CAACO,cAAb,GAA8B,EAA9B;AAEA;AACA;AACA;;AACAP,YAAY,CAACQ,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcnB,UAAU,CAACiB,SAAzB,CAAzB;AACAR,YAAY,CAACQ,SAAb,CAAuBG,WAAvB,GAAqCX,YAArC;AACAS,MAAM,CAACG,cAAP,CAAsBZ,YAAY,CAACQ,SAAnC,EAA8C,oBAA9C,EAAoE;EAClEK,YAAY,EAAE,KADoD;EAElEC,UAAU,EAAE,KAFsD;EAGlEC,QAAQ,EAAE,KAHwD;EAIlEC,KAAK,EAAEtB;AAJ2D,CAApE;AAOA;AACA;AACA;;AAEAM,YAAY,CAACiB,KAAb,GAAqBtB,UAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,YAAY,CAACkB,IAAb,GAAoB,SAASA,IAAT,CAAcC,MAAd,EAAsB;EACxC,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,OAAO,KAAKJ,KAAZ;EACD;;EACD,IAAIE,MAAM,KAAK,KAAf,EAAsB;IACpBA,MAAM,GAAGG,CAAC,IAAI;MACZ,IAAIA,CAAC,IAAI,IAAL,IAAa,OAAOA,CAAP,KAAa,QAA9B,EAAwC;QACtC,MAAM,IAAIC,KAAJ,EAAN;MACD;;MACD,OAAOD,CAAP;IACD,CALD;EAMD;;EACD,KAAKL,KAAL,GAAaE,MAAb;EAEA,OAAO,KAAKF,KAAZ;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjB,YAAY,CAACwB,GAAb,GAAmBjC,UAAU,CAACiC,GAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxB,YAAY,CAACyB,GAAb,GAAmBlC,UAAU,CAACkC,GAA9B;AAEA;AACA;AACA;;AAEAzB,YAAY,CAAC0B,cAAb,GAA8BJ,CAAC,IAAI,CAACA,CAAC,YAAYK,MAAb,IAAuB,OAAOL,CAAP,KAAa,QAArC,KAAkDA,CAAC,CAACD,MAAvF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEArB,YAAY,CAAC4B,aAAb,GAA6BrC,UAAU,CAACqC,aAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5B,YAAY,CAACQ,SAAb,CAAuBqB,IAAvB,GAA8B,YAAW;EACvC,IAAI,KAAKC,aAAT,EAAwB;IACtB,KAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,MAAhB,CAAuB,UAASV,CAAT,EAAY;MACnD,OAAOA,CAAC,CAACW,SAAF,KAAgB,KAAKH,aAA5B;IACD,CAFiB,EAEf,IAFe,CAAlB;IAGA,KAAKA,aAAL,GAAqB,KAArB;EACD;;EAED,IAAIV,SAAS,CAAC,CAAD,CAAT,KAAiB,KAAK,CAAtB,IAA2BA,SAAS,CAAC,CAAD,CAAT,KAAiB,KAAhD,EAAuD;IACrD,OAAO,IAAP;EACD;;EAED,IAAIc,MAAJ;EACA,IAAIC,YAAJ;;EAEA,IAAIvC,KAAK,CAACwC,QAAN,CAAehB,SAAS,CAAC,CAAD,CAAxB,CAAJ,EAAkC;IAChCc,MAAM,GAAGd,SAAS,CAAC,CAAD,CAAT,CAAac,MAAtB;IACAC,YAAY,GAAGf,SAAS,CAAC,CAAD,CAAT,CAAaiB,OAA5B;EACD,CAHD,MAGO;IACLH,MAAM,GAAGd,SAAT;IACAe,YAAY,GAAG1C,aAAa,CAAC6C,QAAd,CAAuBX,MAAvB,CAA8BE,IAA7C;EACD;;EAED,KAAK,MAAMb,KAAX,IAAoBkB,MAApB,EAA4B;IAC1B,IAAIlB,KAAK,KAAKuB,SAAd,EAAyB;MACvB,KAAKpC,UAAL,CAAgBqC,IAAhB,CAAqB,KAAKtB,IAAL,CAAUF,KAAV,CAArB;IACD;EACF;;EAED,MAAMyB,IAAI,GAAG,KAAKtC,UAAlB;;EACA,KAAK2B,aAAL,GAAqB,UAASR,CAAT,EAAY;IAC/B,OAAOiB,SAAS,KAAKjB,CAAd,IAAmB,CAACmB,IAAI,CAACC,OAAL,CAAapB,CAAb,CAA3B;EACD,CAFD;;EAGA,KAAKS,UAAL,CAAgBS,IAAhB,CAAqB;IACnBP,SAAS,EAAE,KAAKH,aADG;IAEnBO,OAAO,EAAEF,YAFU;IAGnBQ,IAAI,EAAE,MAHa;IAInBxC,UAAU,EAAEsC;EAJO,CAArB;EAOA,OAAO,IAAP;AACD,CAzCD;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzC,YAAY,CAACQ,SAAb,CAAuBoC,SAAvB,GAAmC,UAASC,WAAT,EAAsB;EACvD,IAAIzB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwB,CAACwB,WAA7B,EAA0C;IACxC,OAAO,IAAP;EACD;;EACD,OAAO,KAAKpB,GAAL,CAAS,UAASH,CAAT,EAAYwB,IAAZ,EAAkB;IAChC,IAAI,OAAOxB,CAAP,KAAa,QAAjB,EAA2B;MACzBA,CAAC,GAAGwB,IAAI,CAAC5B,IAAL,CAAUI,CAAV,CAAJ;IACD;;IACD,IAAIA,CAAJ,EAAO;MACL,OAAOA,CAAC,CAACyB,WAAF,EAAP;IACD;;IACD,OAAOzB,CAAP;EACD,CARM,CAAP;AASD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtB,YAAY,CAACQ,SAAb,CAAuBwC,SAAvB,GAAmC,UAASH,WAAT,EAAsB;EACvD,IAAIzB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwB,CAACwB,WAA7B,EAA0C;IACxC,OAAO,IAAP;EACD;;EACD,OAAO,KAAKpB,GAAL,CAAS,UAASH,CAAT,EAAYwB,IAAZ,EAAkB;IAChC,IAAI,OAAOxB,CAAP,KAAa,QAAjB,EAA2B;MACzBA,CAAC,GAAGwB,IAAI,CAAC5B,IAAL,CAAUI,CAAV,CAAJ;IACD;;IACD,IAAIA,CAAJ,EAAO;MACL,OAAOA,CAAC,CAAC2B,WAAF,EAAP;IACD;;IACD,OAAO3B,CAAP;EACD,CARM,CAAP;AASD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtB,YAAY,CAACQ,SAAb,CAAuB0C,IAAvB,GAA8B,UAASC,UAAT,EAAqB;EACjD,IAAI/B,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwB,CAAC8B,UAA7B,EAAyC;IACvC,OAAO,IAAP;EACD;;EACD,OAAO,KAAK1B,GAAL,CAAS,UAASH,CAAT,EAAYwB,IAAZ,EAAkB;IAChC,IAAI,OAAOxB,CAAP,KAAa,QAAjB,EAA2B;MACzBA,CAAC,GAAGwB,IAAI,CAAC5B,IAAL,CAAUI,CAAV,CAAJ;IACD;;IACD,IAAIA,CAAJ,EAAO;MACL,OAAOA,CAAC,CAAC4B,IAAF,EAAP;IACD;;IACD,OAAO5B,CAAP;EACD,CARM,CAAP;AASD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtB,YAAY,CAACQ,SAAb,CAAuB4C,SAAvB,GAAmC,UAASpC,KAAT,EAAgBqB,OAAhB,EAAyB;EAC1D,IAAI,KAAKgB,kBAAT,EAA6B;IAC3B,KAAKtB,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,MAAhB,CAAuB,UAASV,CAAT,EAAY;MACnD,OAAOA,CAAC,CAACW,SAAF,KAAgB,KAAKoB,kBAA5B;IACD,CAFiB,EAEf,IAFe,CAAlB;EAGD;;EAED,IAAIrC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKuB,SAAhC,EAA2C;IACzC,IAAIe,GAAG,GAAGjB,OAAO,IAAI5C,aAAa,CAAC6C,QAAd,CAAuBX,MAAvB,CAA8ByB,SAAnD;IACAE,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,aAAZ,EAA2BvC,KAA3B,CAAN;IACA,KAAKe,UAAL,CAAgBS,IAAhB,CAAqB;MACnBP,SAAS,EAAE,KAAKoB,kBAAL,GAA0B,UAAS/B,CAAT,EAAY;QAC/C,OAAOA,CAAC,KAAK,IAAN,IAAcA,CAAC,CAACD,MAAF,IAAYL,KAAjC;MACD,CAHkB;MAInBqB,OAAO,EAAEiB,GAJU;MAKnBX,IAAI,EAAE,WALa;MAMnBS,SAAS,EAAEpC;IANQ,CAArB;EAQD;;EAED,OAAO,IAAP;AACD,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,YAAY,CAACQ,SAAb,CAAuBgD,SAAvB,GAAmC,UAASxC,KAAT,EAAgBqB,OAAhB,EAAyB;EAC1D,IAAI,KAAKoB,kBAAT,EAA6B;IAC3B,KAAK1B,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,MAAhB,CAAuB,UAASV,CAAT,EAAY;MACnD,OAAOA,CAAC,CAACW,SAAF,KAAgB,KAAKwB,kBAA5B;IACD,CAFiB,EAEf,IAFe,CAAlB;EAGD;;EAED,IAAIzC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKuB,SAAhC,EAA2C;IACzC,IAAIe,GAAG,GAAGjB,OAAO,IAAI5C,aAAa,CAAC6C,QAAd,CAAuBX,MAAvB,CAA8B6B,SAAnD;IACAF,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,aAAZ,EAA2BvC,KAA3B,CAAN;IACA,KAAKe,UAAL,CAAgBS,IAAhB,CAAqB;MACnBP,SAAS,EAAE,KAAKwB,kBAAL,GAA0B,UAASnC,CAAT,EAAY;QAC/C,OAAOA,CAAC,KAAK,IAAN,IAAcA,CAAC,CAACD,MAAF,IAAYL,KAAjC;MACD,CAHkB;MAInBqB,OAAO,EAAEiB,GAJU;MAKnBX,IAAI,EAAE,WALa;MAMnBa,SAAS,EAAExC;IANQ,CAArB;EAQD;;EAED,OAAO,IAAP;AACD,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,YAAY,CAACQ,SAAb,CAAuBkD,KAAvB,GAA+B,SAASA,KAAT,CAAetD,MAAf,EAAuBiC,OAAvB,EAAgC;EAC7D;EAEA,MAAMiB,GAAG,GAAGjB,OAAO,IAAI5C,aAAa,CAAC6C,QAAd,CAAuBX,MAAvB,CAA8B+B,KAArD;;EAEA,MAAMC,cAAc,GAAG,UAASrC,CAAT,EAAY;IACjC,IAAI,CAAClB,MAAL,EAAa;MACX,OAAO,KAAP;IACD,CAHgC,CAKjC;IACA;;;IACAA,MAAM,CAACwD,SAAP,GAAmB,CAAnB;IAEA,MAAMC,GAAG,GAAKvC,CAAC,IAAI,IAAL,IAAaA,CAAC,KAAK,EAApB,GACTlB,MAAM,CAAC0D,IAAP,CAAYxC,CAAZ,CADS,GAET,IAFJ;IAGA,OAAOuC,GAAP;EACD,CAbD;;EAeA,KAAK9B,UAAL,CAAgBS,IAAhB,CAAqB;IACnBP,SAAS,EAAE0B,cADQ;IAEnBtB,OAAO,EAAEiB,GAFU;IAGnBX,IAAI,EAAE,QAHa;IAInBoB,MAAM,EAAE3D;EAJW,CAArB;EAMA,OAAO,IAAP;AACD,CA3BD;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAJ,YAAY,CAACQ,SAAb,CAAuBoB,aAAvB,GAAuC,SAASA,aAAT,CAAuBZ,KAAvB,EAA8BgD,GAA9B,EAAmC;EACxE,IAAIzE,UAAU,CAAC0E,MAAX,CAAkB,IAAlB,EAAwBjD,KAAxB,EAA+BgD,GAA/B,EAAoC,IAApC,CAAJ,EAA+C;IAC7C,OAAO,CAAC,CAAChD,KAAT;EACD,CAHuE,CAKxE;EACA;;;EACA,MAAMU,cAAc,GAAG,OAAO,KAAKf,WAAL,CAAiBiB,aAAxB,IAAyC,UAAzC,GACrB,KAAKjB,WAAL,CAAiBiB,aAAjB,EADqB,GAErB5B,YAAY,CAAC4B,aAAb,EAFF;;EAIA,OAAOF,cAAc,CAACV,KAAD,CAArB;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AAEAhB,YAAY,CAACQ,SAAb,CAAuBU,IAAvB,GAA8B,UAASF,KAAT,EAAgBgD,GAAhB,EAAqBE,IAArB,EAA2B;EACvD,IAAI3E,UAAU,CAAC0E,MAAX,CAAkB,IAAlB,EAAwBjD,KAAxB,EAA+BgD,GAA/B,EAAoCE,IAApC,CAAJ,EAA+C;IAC7C;IAEA,IAAIlD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKuB,SAAhC,EAA2C;MACzC,OAAOvB,KAAP;IACD,CAL4C,CAO7C;;;IACAjB,QAAQ,KAAKA,QAAQ,GAAGP,OAAO,CAAC,eAAD,CAAvB,CAAR;;IAEA,IAAIwB,KAAK,YAAYjB,QAArB,EAA+B;MAC7BiB,KAAK,CAACmD,GAAN,CAAUC,YAAV,GAAyB,IAAzB;MACA,OAAOpD,KAAP;IACD,CAb4C,CAe7C;;;IACA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAOA,KAAP;IACD,CAFD,MAEO,IAAIqD,MAAM,CAACC,QAAP,CAAgBtD,KAAhB,KAA0B,CAACpB,KAAK,CAACwC,QAAN,CAAepB,KAAf,CAA/B,EAAsD;MAC3D,MAAM,IAAIlB,SAAJ,CAAc,QAAd,EAAwBkB,KAAxB,EAA+B,KAAKuD,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAAN;IACD,CApB4C,CAsB7C;IACA;IACA;;;IACA,MAAMA,IAAI,GAAGP,GAAG,CAACQ,WAAJ,CAAgB,KAAKD,IAArB,CAAb;IACA,MAAME,KAAK,GAAGT,GAAG,CAACU,aAAJ,GAAoBV,GAAG,CAACU,aAAJ,EAApB,GAA0CV,GAAxD;IACA,MAAMW,GAAG,GAAGF,KAAK,CAACG,SAAN,CAAgBL,IAAhB,EAAsB,IAAtB,CAAZ;IACA,MAAMV,GAAG,GAAG,IAAIc,GAAG,CAACzE,OAAJ,CAAYL,mBAAZ,CAAJ,CAAqCmB,KAArC,CAAZ;IACA6C,GAAG,CAACM,GAAJ,CAAQC,YAAR,GAAuB,IAAvB;IACA,OAAOP,GAAP;EACD;;EAED,MAAMlE,UAAU,GAAG,OAAO,KAAKgB,WAAL,CAAiBO,IAAxB,KAAiC,UAAjC,GACjB,KAAKP,WAAL,CAAiBO,IAAjB,EADiB,GAEjBlB,YAAY,CAACkB,IAAb,EAFF;;EAGA,IAAI;IACF,OAAOvB,UAAU,CAACqB,KAAD,CAAjB;EACD,CAFD,CAEE,OAAO6D,KAAP,EAAc;IACd,MAAM,IAAI/E,SAAJ,CAAc,QAAd,EAAwBkB,KAAxB,EAA+B,KAAKuD,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAAN;EACD;AACF,CA1CD;AA4CA;AACA;AACA;;;AAEA,SAASO,YAAT,CAAsBC,GAAtB,EAA2B;EACzB,OAAO,KAAKC,YAAL,CAAkBD,GAAlB,CAAP;AACD;;AAED,SAASE,WAAT,CAAqBF,GAArB,EAA0B;EACxB,MAAMG,KAAK,GAAG,IAAd;;EACA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,GAAd,CAAL,EAAyB;IACvB,OAAO,CAAC,KAAKC,YAAL,CAAkBD,GAAlB,CAAD,CAAP;EACD;;EACD,OAAOA,GAAG,CAACM,GAAJ,CAAQ,UAASC,CAAT,EAAY;IACzB,OAAOJ,KAAK,CAACF,YAAN,CAAmBM,CAAnB,CAAP;EACD,CAFM,CAAP;AAGD;;AAED,MAAMC,oBAAoB,GAAG3F,KAAK,CAACM,OAAN,CAAcX,UAAU,CAACiB,SAAX,CAAqB+E,oBAAnC,EAAyD;EACpFC,IAAI,EAAEP,WAD8E;EAEpFQ,GAAG,EAAEX,YAF+E;EAGpFY,IAAI,EAAEZ,YAH8E;EAIpFa,GAAG,EAAEb,YAJ+E;EAKpFc,IAAI,EAAEd,YAL8E;EAMpFe,QAAQ,EAAElE,MAN0E;EAOpFmE,MAAM,EAAEhB,YAP4E;EAQpFiB,IAAI,EAAEjB;AAR8E,CAAzD,CAA7B;AAWArE,MAAM,CAACG,cAAP,CAAsBZ,YAAY,CAACQ,SAAnC,EAA8C,sBAA9C,EAAsE;EACpEK,YAAY,EAAE,KADsD;EAEpEC,UAAU,EAAE,KAFwD;EAGpEC,QAAQ,EAAE,KAH0D;EAIpEC,KAAK,EAAEP,MAAM,CAACuF,MAAP,CAAcT,oBAAd;AAJ6D,CAAtE;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvF,YAAY,CAACQ,SAAb,CAAuBwE,YAAvB,GAAsC,UAASiB,YAAT,EAAuBlB,GAAvB,EAA4B;EAChE,IAAImB,OAAJ;;EACA,IAAI9E,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B6E,OAAO,GAAG,KAAKX,oBAAL,CAA0BU,YAA1B,CAAV;;IACA,IAAI,CAACC,OAAL,EAAc;MACZ,MAAM,IAAI3E,KAAJ,CAAU,gBAAgB0E,YAAhB,GAA+B,eAAzC,CAAN;IACD;;IACD,OAAOC,OAAO,CAAC7F,IAAR,CAAa,IAAb,EAAmB0E,GAAnB,CAAP;EACD;;EACDA,GAAG,GAAGkB,YAAN;;EACA,IAAIxF,MAAM,CAACD,SAAP,CAAiB2F,QAAjB,CAA0B9F,IAA1B,CAA+B0E,GAA/B,MAAwC,iBAA5C,EAA+D;IAC7D,OAAOA,GAAP;EACD;;EAED,OAAO,KAAKqB,aAAL,CAAmBrB,GAAnB,CAAP;AACD,CAfD;AAiBA;AACA;AACA;;;AAEAsB,MAAM,CAACC,OAAP,GAAiBtG,YAAjB"},"metadata":{},"sourceType":"script"}