{"ast":null,"code":"'use strict';\n\nmodule.exports = function merge(s1, s2) {\n  s1.add(s2.tree || {});\n  s1.callQueue = s1.callQueue.concat(s2.callQueue);\n  s1.method(s2.methods);\n  s1.static(s2.statics);\n\n  for (const query in s2.query) {\n    s1.query[query] = s2.query[query];\n  }\n\n  for (const virtual in s2.virtuals) {\n    s1.virtuals[virtual] = s2.virtuals[virtual].clone();\n  }\n\n  s1.s.hooks.merge(s2.s.hooks, false);\n};","map":{"version":3,"names":["module","exports","merge","s1","s2","add","tree","callQueue","concat","method","methods","static","statics","query","virtual","virtuals","clone","s","hooks"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/helpers/schema/merge.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function merge(s1, s2) {\n  s1.add(s2.tree || {});\n\n  s1.callQueue = s1.callQueue.concat(s2.callQueue);\n  s1.method(s2.methods);\n  s1.static(s2.statics);\n\n  for (const query in s2.query) {\n    s1.query[query] = s2.query[query];\n  }\n\n  for (const virtual in s2.virtuals) {\n    s1.virtuals[virtual] = s2.virtuals[virtual].clone();\n  }\n\n  s1.s.hooks.merge(s2.s.hooks, false);\n};\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,EAAf,EAAmBC,EAAnB,EAAuB;EACtCD,EAAE,CAACE,GAAH,CAAOD,EAAE,CAACE,IAAH,IAAW,EAAlB;EAEAH,EAAE,CAACI,SAAH,GAAeJ,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoBJ,EAAE,CAACG,SAAvB,CAAf;EACAJ,EAAE,CAACM,MAAH,CAAUL,EAAE,CAACM,OAAb;EACAP,EAAE,CAACQ,MAAH,CAAUP,EAAE,CAACQ,OAAb;;EAEA,KAAK,MAAMC,KAAX,IAAoBT,EAAE,CAACS,KAAvB,EAA8B;IAC5BV,EAAE,CAACU,KAAH,CAASA,KAAT,IAAkBT,EAAE,CAACS,KAAH,CAASA,KAAT,CAAlB;EACD;;EAED,KAAK,MAAMC,OAAX,IAAsBV,EAAE,CAACW,QAAzB,EAAmC;IACjCZ,EAAE,CAACY,QAAH,CAAYD,OAAZ,IAAuBV,EAAE,CAACW,QAAH,CAAYD,OAAZ,EAAqBE,KAArB,EAAvB;EACD;;EAEDb,EAAE,CAACc,CAAH,CAAKC,KAAL,CAAWhB,KAAX,CAAiBE,EAAE,CAACa,CAAH,CAAKC,KAAtB,EAA6B,KAA7B;AACD,CAhBD"},"metadata":{},"sourceType":"script"}