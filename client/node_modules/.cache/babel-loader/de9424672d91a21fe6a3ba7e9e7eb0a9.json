{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Kareem = require('kareem');\n\nconst MongooseError = require('./error/mongooseError');\n\nconst SchemaType = require('./schematype');\n\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\n\nconst VirtualOptions = require('./options/VirtualOptions');\n\nconst VirtualType = require('./virtualtype');\n\nconst addAutoId = require('./helpers/schema/addAutoId');\n\nconst arrayParentSymbol = require('./helpers/symbols').arrayParentSymbol;\n\nconst get = require('./helpers/get');\n\nconst getIndexes = require('./helpers/schema/getIndexes');\n\nconst merge = require('./helpers/schema/merge');\n\nconst mpath = require('mpath');\n\nconst readPref = require('./driver').get().ReadPreference;\n\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\n\nconst util = require('util');\n\nconst utils = require('./utils');\n\nconst validateRef = require('./helpers/populate/validateRef');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').middlewareFunctions;\n\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\n\nconst hookNames = queryHooks.concat(documentHooks).reduce((s, hook) => s.add(hook), new Set());\nlet id = 0;\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [typePojoToMixed](/docs/guide.html#typePojoToMixed) - boolean - defaults to true. Determines whether a type set to a POJO becomes a Mixed path or a Subdocument\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [storeSubdocValidationError](/docs/guide.html#storeSubdocValidationError): boolean - Defaults to true. If false, Mongoose will wrap validation errors in single nested document subpaths into a single validation error on the single nested subdoc's path.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = []; // For internal debugging. Do not use this to try to save a schema in MDB.\n\n  this.$id = ++id;\n  this.s = {\n    hooks: new Kareem()\n  };\n  this.options = this.defaultOptions(options); // build paths\n\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  } // check if _id's value is a subdocument (gh-2276)\n\n\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id); // ensure the documents get an auto _id unless disabled\n\n\n  const auto_id = !this.paths['_id'] && !this.options.noId && this.options._id && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n/*!\n * Create virtual properties with alias field\n */\n\n\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n\n    if (options == null) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n\n    if (!alias) {\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n    schema.virtual(alias).get(function (p) {\n      return function () {\n        if (typeof this.get === 'function') {\n          return this.get(p);\n        }\n\n        return this[p];\n      };\n    }(prop)).set(function (p) {\n      return function (v) {\n        return this.$set(p, v);\n      };\n    }(prop));\n  }\n}\n/*!\n * Inherit from EventEmitter.\n */\n\n\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function () {\n  const Constructor = this.base == null ? Schema : this.base.Schema;\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function (f) {\n    return f;\n  });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases); // Bubble up `init` for backwards compat\n\n  s.on('init', v => this.emit('init', v));\n  return s;\n};\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\n\nSchema.prototype.pick = function (paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' + 'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({\n        [path]: get(this.tree, path)\n      });\n    } else {\n      const schematype = this.path(path);\n\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n\n      newSchema.add({\n        [path]: schematype\n      });\n    }\n  }\n\n  return newSchema;\n};\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\n\nSchema.prototype.defaultOptions = function (options) {\n  if (options && options.safe === false) {\n    options.safe = {\n      w: 0\n    };\n  }\n\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n  const baseOptions = get(this, 'base.options', {});\n  options = utils.options({\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\n    strictQuery: 'strictQuery' in baseOptions ? baseOptions.strictQuery : false,\n    bufferCommands: true,\n    capped: false,\n    // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false,\n    // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false,\n    // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type',\n    typePojoToMixed: 'typePojoToMixed' in baseOptions ? baseOptions.typePojoToMixed : true\n  }, utils.clone(options));\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema) {\n    merge(this, obj);\n    return this;\n  } // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n\n\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const fullPath = prefix + key;\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath + '`, got value \"' + obj[key] + '\"');\n    } // Retain `_id: false` but don't set it as a path, re: gh-8274.\n\n\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n\n    if (obj[key] instanceof VirtualType) {\n      this.virtual(obj[key]);\n      continue;\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath + '`, got value \"' + obj[key][0] + '\"');\n    }\n\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || this.options.typeKey === 'type' && obj[key].type.type) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object { last: { name: String }}\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      if (!this.options.typePojoToMixed && utils.isPOJO(obj[key][this.options.typeKey])) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        } // Propage `typePojoToMixed` to implicitly created schemas\n\n\n        const opts = {\n          typePojoToMixed: false\n        };\n\n        const _schema = new Schema(obj[key][this.options.typeKey], opts);\n\n        const schemaWrappedPath = Object.assign({}, obj[key], {\n          [this.options.typeKey]: _schema\n        });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n\n  const addedKeys = Object.keys(obj).map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations\n * because they conflict with Mongoose functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will throw\n * an error.\n *\n * - _posts\n * - _pres\n * - collection\n * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved; // Core object\n\nreserved['prototype'] = // EventEmitter\nreserved.emit = reserved.listeners = reserved.on = reserved.removeListener = // document properties and functions\nreserved.collection = reserved.errors = reserved.get = reserved.init = reserved.isModified = reserved.isNew = reserved.populated = reserved.remove = reserved.save = reserved.schema = reserved.toObject = reserved.validate = 1;\n/*!\n * Document keys to print warnings for\n */\n\nconst warnings = {};\nwarnings.increment = '`increment` should not be used as a schema path name ' + 'unless you have disabled versioning.';\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function (path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n\n    if (schematype != null) {\n      return schematype;\n    } // Look for maps\n\n\n    const mapPath = getMapPath(this, path);\n\n    if (mapPath != null) {\n      return mapPath;\n    } // Look if a parent of this path is mixed\n\n\n    schematype = this.hasMixedParent(cleanPath);\n\n    if (schematype != null) {\n      return schematype;\n    } // subpaths?\n\n\n    return /\\.\\d+\\.?.*$/.test(path) ? getPositionalPath(this, path) : undefined;\n  } // some path names conflict with document methods\n\n\n  const firstPieceOfPath = path.split('.')[0];\n\n  if (reserved[firstPieceOfPath]) {\n    throw new Error('`' + firstPieceOfPath + '` may not be used as a schema pathname');\n  }\n\n  if (warnings[path]) {\n    console.log('WARN: ' + warnings[path]);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  } // update the tree\n\n\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. ' + 'Parent path `' + fullPath + '` already set to type ' + branch[sub].name + '.';\n      throw new Error(msg);\n    }\n\n    branch = branch[sub];\n  }\n\n  branch[last] = utils.clone(obj);\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    let _mapType = {\n      type: {}\n    };\n\n    if (utils.hasUserDefinedProperty(obj, 'of')) {\n      const isInlineSchema = utils.isPOJO(obj.of) && Object.keys(obj.of).length > 0 && !utils.hasUserDefinedProperty(obj.of, this.options.typeKey);\n      _mapType = isInlineSchema ? new Schema(obj.of) : obj.of;\n    }\n\n    this.paths[mapPath] = this.interpretAsType(mapPath, _mapType, this.options);\n    schemaType.$__schemaType = this.paths[mapPath];\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key in schemaType.schema.paths) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n\n    for (const key in schemaType.schema.singleNestedPaths) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n    }\n\n    for (const key in schemaType.schema.subpaths) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.subpaths[key];\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n    const toAdd = [];\n\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$'; // Skip arrays of document arrays\n\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType = _schemaType.caster.clone();\n      }\n\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.subpaths[path + '.' + key] = schemaType.schema.paths[key];\n      schemaType.schema.paths[key].$isUnderneathDocArray = true;\n    }\n\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.subpaths[path + '.' + key] = schemaType.schema.subpaths[key];\n      schemaType.schema.subpaths[key].$isUnderneathDocArray = true;\n    }\n\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.subpaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n      schemaType.schema.singleNestedPaths[key].$isUnderneathDocArray = true;\n    }\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({\n        schema: schematype.schema,\n        model: schematype.caster\n      });\n    }\n  }\n\n  return childSchemas;\n}\n/*!\n * ignore\n */\n\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath)) {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n/*!\n * ignore\n */\n\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n/*!\n * ignore\n */\n\n\nfunction getMapPath(schema, path) {\n  for (const _path of Object.keys(schema.paths)) {\n    if (!_path.includes('.$*')) {\n      continue;\n    }\n\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function (path, obj, options) {\n  if (obj instanceof SchemaType) {\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  } // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n\n\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  } // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n\n\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type) ? obj[options.typeKey] : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = type === Array || type === 'array' ? obj.cast : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n\n    if (cast && cast[options.typeKey] && cast[options.typeKey].instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || options.typeKey === 'type' && cast.type.type) && utils.isPOJO(cast)) {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = {\n          minimize: options.minimize\n        };\n\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        } // propagate 'strict' option to child schema\n\n\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n\n        if (options.hasOwnProperty('typePojoToMixed')) {\n          childSchemaOptions.typePojoToMixed = options.typePojoToMixed;\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions && Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type) ? cast[options.typeKey] : cast;\n      name = typeof type === 'string' ? type : type.schemaName || utils.getFunctionName(type);\n\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' + `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` + 'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  } // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n\n\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` + `a valid type at path \\`${path}\\`. See ` + 'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  return new MongooseTypes[name](path, obj);\n};\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\n\nSchema.prototype.eachPath = function (fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\n\nSchema.prototype.pathType = function (path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  if (this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path)) {\n    return 'real';\n  } // Look for maps\n\n\n  const mapPath = getMapPath(this, path);\n\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n\n  return 'adhocOrUndefined';\n};\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\n\nSchema.prototype.hasMixedParent = function (path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n\n    if (path in this.paths && this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\n\n\nSchema.prototype.setupTimestamp = function (timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n/*!\n * ignore. Deprecated re: #6405\n */\n\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ? self.paths[subpaths[0]] : 'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n\n      break;\n    } // ignore if its just a position segment: path.0.subpath\n\n\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = type === 'nested';\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n\n  if (val) {\n    return 'real';\n  }\n\n  if (isNested) {\n    return 'nested';\n  }\n\n  return 'adhocOrUndefined';\n}\n/*!\n * ignore\n */\n\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\n\nSchema.prototype.queue = function (name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n/**\n * Defines a pre hook for the document.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\n\nSchema.prototype.pre = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n\n    return this;\n  }\n\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n\n    return this;\n  }\n\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\n\nSchema.prototype.post = function (name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n\n    return this;\n  }\n\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n\n    return this;\n  }\n\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\n\nSchema.prototype.plugin = function (fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' + 'got \"' + typeof fn + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n\n  this.plugins.push({\n    fn: fn,\n    opts: opts\n  });\n  fn(this, opts);\n  return this;\n};\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](./guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\n\nSchema.prototype.method = function (name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n\n  return this;\n};\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\n\nSchema.prototype.static = function (name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n\n  return this;\n};\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\n\nSchema.prototype.index = function (fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n\n  return this;\n};\n/**\n * Sets/gets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\n\nSchema.prototype.set = function (key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n\n    case 'safe':\n      setSafe(this.options, value);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n\n      break;\n\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nconst safeDeprecationWarning = 'Mongoose: The `safe` option for schemas is ' + 'deprecated. Use the `writeConcern` option instead: ' + 'http://bit.ly/mongoose-write-concern';\nconst setSafe = util.deprecate(function setSafe(options, value) {\n  options.safe = value === false ? {\n    w: 0\n  } : value;\n}, safeDeprecationWarning);\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function (key) {\n  return this.options[key];\n};\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function () {\n    return indexTypes;\n  },\n  set: function () {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()`\n * or by `index: true` in a path's options.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function () {\n  return getIndexes(this);\n};\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @return {VirtualType}\n */\n\n\nSchema.prototype.virtual = function (name, options) {\n  if (name instanceof VirtualType) {\n    return this.virtual(name.path, name.options);\n  }\n\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function (obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n    const virtual = this.virtual(name);\n    virtual.options = options;\n    return virtual.get(function (_v) {\n      if (this.$$populatedVirtuals && this.$$populatedVirtuals.hasOwnProperty(name)) {\n        return this.$$populatedVirtuals[name];\n      }\n\n      if (_v == null) return undefined;\n      return _v;\n    }).set(function (_v) {\n      if (!this.$$populatedVirtuals) {\n        this.$$populatedVirtuals = {};\n      }\n\n      if (options.justOne || options.count) {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v[0] : _v;\n\n        if (typeof this.$$populatedVirtuals[name] !== 'object') {\n          this.$$populatedVirtuals[name] = options.count ? _v : null;\n        }\n      } else {\n        this.$$populatedVirtuals[name] = Array.isArray(_v) ? _v : _v == null ? [] : [_v];\n        this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function (doc) {\n          return doc && typeof doc === 'object';\n        });\n      }\n    });\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' + ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function (mem, part, i) {\n    mem[part] || (mem[part] = i === parts.length - 1 ? new VirtualType(options, name) : {});\n    return mem[part];\n  }, this.tree); // Workaround for gh-8198: if virtual is under document array, make a fake\n  // virtual. See gh-8210\n\n  let cur = parts[0];\n\n  for (let i = 0; i < parts.length - 1; ++i) {\n    if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n      const remnant = parts.slice(i + 1).join('.');\n      const v = this.paths[cur].schema.virtual(remnant);\n      v.get((v, virtual, doc) => {\n        const parent = doc.__parentArray[arrayParentSymbol];\n        const path = cur + '.' + doc.__index + '.' + remnant;\n        return parent.get(path);\n      });\n      break;\n    }\n\n    cur += '.' + parts[i + 1];\n  }\n\n  return virtuals[name];\n};\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\n\nSchema.prototype.virtualpath = function (name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\n\n\nSchema.prototype.remove = function (path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n\n  if (Array.isArray(path)) {\n    path.forEach(function (name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).concat(Object.keys(this.nested));\n\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n\n        _deletePath(this, name);\n\n        return;\n      }\n\n      delete this.paths[name];\n\n      _deletePath(this, name);\n    }, this);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](http://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](http://mongoosejs.com/docs/guide.html#statics), and\n * [methods](http://mongoosejs.com/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\n\n\nSchema.prototype.loadClass = function (model, virtualsOnly) {\n  if (model === Object.prototype || model === Function.prototype || model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model)); // Add static methods\n\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function (name) {\n      if (name.match(/^(length|name|prototype)$/)) {\n        return;\n      }\n\n      const method = Object.getOwnPropertyDescriptor(model, name);\n\n      if (typeof method.value === 'function') {\n        this.static(name, method.value);\n      }\n    }, this);\n  } // Add methods and virtuals\n\n\n  Object.getOwnPropertyNames(model.prototype).forEach(function (name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n\n    if (typeof method.get === 'function') {\n      this.virtual(name).get(method.get);\n    }\n\n    if (typeof method.set === 'function') {\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n  return this;\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getSchema = function (path) {\n  const _this = this;\n\n  const pathschema = _this.path(path);\n\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          } // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n\n\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                } // comments.$.comments.$.title\n\n\n                ret = search(parts.slice(p + 1), foundschema.schema);\n\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray || !foundschema.schema.$isSingleNested;\n                }\n\n                return ret;\n              } // this is the last path of the selector\n\n\n              ret = search(parts.slice(p), foundschema.schema);\n\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray || !foundschema.schema.$isSingleNested;\n              }\n\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n        return foundschema;\n      }\n    }\n  } // look for arrays\n\n\n  const parts = path.split('.');\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n\n  return search(parts, _this);\n};\n/*!\n * ignore\n */\n\n\nSchema.prototype._getPathType = function (path) {\n  const _this = this;\n\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return {\n              schema: foundschema,\n              pathType: 'mixed'\n            };\n          } // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n\n\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return {\n                  schema: foundschema,\n                  pathType: 'nested'\n                };\n              } // comments.$.comments.$.title\n\n\n              return search(parts.slice(p + 1), foundschema.schema);\n            } // this is the last path of the selector\n\n\n            return search(parts.slice(p), foundschema.schema);\n          }\n\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n\n        return {\n          schema: foundschema,\n          pathType: 'real'\n        };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return {\n          schema: schema,\n          pathType: 'nested'\n        };\n      }\n    }\n\n    return {\n      schema: foundschema || schema,\n      pathType: 'undefined'\n    };\n  } // look for arrays\n\n\n  return search(path.split('.'), _this);\n};\n/*!\n * ignore\n */\n\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = Schema; // require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](#schema-string-js)\n * - [Number](#schema-number-js)\n * - [Boolean](#schema-boolean-js) | Bool\n * - [Array](#schema-array-js)\n * - [Buffer](#schema-buffer-js)\n * - [Date](#schema-date-js)\n * - [ObjectId](#schema-objectid-js) | Oid\n * - [Mixed](#schema-mixed-js)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;","map":{"version":3,"names":["EventEmitter","require","Kareem","MongooseError","SchemaType","SchemaTypeOptions","VirtualOptions","VirtualType","addAutoId","arrayParentSymbol","get","getIndexes","merge","mpath","readPref","ReadPreference","setupTimestamps","util","utils","validateRef","MongooseTypes","queryHooks","middlewareFunctions","documentHooks","hookNames","concat","reduce","s","hook","add","Set","id","Schema","obj","options","paths","aliases","subpaths","virtuals","singleNestedPaths","nested","inherits","callQueue","_indexes","methods","methodOptions","statics","tree","query","childSchemas","plugins","$id","hooks","defaultOptions","Array","isArray","definition","_idSubDoc","_id","isObject","auto_id","noId","setupTimestamp","timestamps","aliasFields","schema","Object","keys","path","prop","alias","Error","virtual","p","set","v","$set","prototype","create","constructor","instanceOfSchema","defineProperty","configurable","enumerable","writable","clone","Constructor","base","_userProvidedOptions","map","f","slice","call","gatherChildSchemas","$globalPluginsApplied","$isRootDiscriminator","$implicitlyCreated","discriminatorMapping","assign","discriminators","on","emit","pick","newSchema","schematype","safe","w","versionKey","baseOptions","strict","strictQuery","bufferCommands","capped","optimisticConcurrency","discriminatorKey","minimize","autoIndex","shardKey","read","validateBeforeSave","noVirtualId","typeKey","typePojoToMixed","prefix","key","fullPath","TypeError","length","isPOJO","substr","type","opts","_schema","schemaWrappedPath","addedKeys","reserved","listeners","removeListener","collection","errors","init","isModified","isNew","populated","remove","save","toObject","validate","warnings","increment","cleanPath","_pathToPositionalSyntax","undefined","_getPath","mapPath","getMapPath","hasMixedParent","test","getPositionalPath","firstPieceOfPath","split","console","log","hasUserDefinedProperty","ref","last","pop","branch","sub","msg","name","interpretAsType","schemaType","$isSchemaMap","_mapType","isInlineSchema","of","$__schemaType","$isSingleNested","value","caster","push","model","$isMongooseDocumentArray","casterConstructor","$isMongooseArray","arrayPath","_schemaType","toAdd","$embeddedSchemaType","_arrayPath","$isUnderneathDocArray","hasOwnProperty","replace","_path","includes","re","RegExp","Types","constructorName","getFunctionName","oldObj","Mixed","cast","DocumentArray","charAt","toUpperCase","substring","childSchemaOptions","childSchema","schemaName","Embedded","Buffer","isBuffer","toString","eachPath","fn","len","i","requiredPaths","invalidate","_requiredpaths","ret","isRequired","indexedPaths","_indexedpaths","indexes","pathType","getPositionalPathType","self","filter","Boolean","val","isNested","subpath","queue","args","pre","remainingArgs","arguments","apply","el","post","plugin","deduplicate","method","static","index","fields","expires","_tags","setSafe","auto","safeDeprecationWarning","deprecate","indexTypes","localField","foreignField","has","_v","$$populatedVirtuals","justOne","count","unset","doc","parts","mem","part","cur","remnant","join","parent","__parentArray","__index","virtualpath","forEach","allKeys","startsWith","_deletePath","pieces","piece","loadClass","virtualsOnly","Function","getPrototypeOf","getOwnPropertyNames","match","getOwnPropertyDescriptor","_getSchema","_this","pathschema","resultPath","$fullPath","search","foundschema","trypath","isArrayFilter","_getPathType","endsWith","module","exports","ObjectId"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/schema.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst SchemaType = require('./schematype');\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\nconst VirtualOptions = require('./options/VirtualOptions');\nconst VirtualType = require('./virtualtype');\nconst addAutoId = require('./helpers/schema/addAutoId');\nconst arrayParentSymbol = require('./helpers/symbols').arrayParentSymbol;\nconst get = require('./helpers/get');\nconst getIndexes = require('./helpers/schema/getIndexes');\nconst merge = require('./helpers/schema/merge');\nconst mpath = require('mpath');\nconst readPref = require('./driver').get().ReadPreference;\nconst setupTimestamps = require('./helpers/timestamps/setupTimestamps');\nconst util = require('util');\nconst utils = require('./utils');\nconst validateRef = require('./helpers/populate/validateRef');\n\nlet MongooseTypes;\n\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').\n  middlewareFunctions;\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\nconst hookNames = queryHooks.concat(documentHooks).\n  reduce((s, hook) => s.add(hook), new Set());\n\nlet id = 0;\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     const child = new Schema({ name: String });\n *     const schema = new Schema({ name: String, age: Number, children: [child] });\n *     const Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [strictQuery](/docs/guide.html#strictQuery): bool - defaults to false\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [typePojoToMixed](/docs/guide.html#typePojoToMixed) - boolean - defaults to true. Determines whether a type set to a POJO becomes a Mixed path or a Subdocument\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\n * - [storeSubdocValidationError](/docs/guide.html#storeSubdocValidationError): boolean - Defaults to true. If false, Mongoose will wrap validation errors in single nested document subpaths into a single validation error on the single nested subdoc's path.\n *\n * ####Options for Nested Schemas:\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.methodOptions = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = [];\n  // For internal debugging. Do not use this to try to save a schema in MDB.\n  this.$id = ++id;\n\n  this.s = {\n    hooks: new Kareem()\n  };\n\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (Array.isArray(obj)) {\n    for (const definition of obj) {\n      this.add(definition);\n    }\n  } else if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  const auto_id = !this.paths['_id'] &&\n      (!this.options.noId && this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    addAutoId(this);\n  }\n\n  this.setupTimestamp(this.options.timestamps);\n}\n\n/*!\n * Create virtual properties with alias field\n */\nfunction aliasFields(schema, paths) {\n  paths = paths || Object.keys(schema.paths);\n  for (const path of paths) {\n    const options = get(schema.paths[path], 'options');\n    if (options == null) {\n      continue;\n    }\n\n    const prop = schema.paths[path].path;\n    const alias = options.alias;\n\n    if (!alias) {\n      continue;\n    }\n\n    if (typeof alias !== 'string') {\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n    }\n\n    schema.aliases[alias] = prop;\n\n    schema.\n      virtual(alias).\n      get((function(p) {\n        return function() {\n          if (typeof this.get === 'function') {\n            return this.get(p);\n          }\n          return this[p];\n        };\n      })(prop)).\n      set((function(p) {\n        return function(v) {\n          return this.$set(p, v);\n        };\n      })(prop));\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/*!\n * ignore\n */\n\nObject.defineProperty(Schema.prototype, '$schemaType', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n * @instance\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     const schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.obj;\n\n/**\n * The paths defined on this schema. The keys are the top-level paths\n * in this schema, and the values are instances of the SchemaType class.\n *\n * ####Example:\n *     const schema = new Schema({ name: String }, { _id: false });\n *     schema.paths; // { name: SchemaString { ... } }\n *\n *     schema.add({ age: Number });\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\n *\n * @api public\n * @property paths\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     const clone = schema.clone();\n *     clone === schema; // false\n *     clone.path('name'); // SchemaString { ... }\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n * @instance\n */\n\nSchema.prototype.clone = function() {\n  const Constructor = this.base == null ? Schema : this.base.Schema;\n\n  const s = new Constructor({}, this._userProvidedOptions);\n  s.base = this.base;\n  s.obj = this.obj;\n  s.options = utils.clone(this.options);\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = utils.clone(this.methods);\n  s.methodOptions = utils.clone(this.methodOptions);\n  s.statics = utils.clone(this.statics);\n  s.query = utils.clone(this.query);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes);\n  s.s.hooks = this.s.hooks.clone();\n\n  s.tree = utils.clone(this.tree);\n  s.paths = utils.clone(this.paths);\n  s.nested = utils.clone(this.nested);\n  s.subpaths = utils.clone(this.subpaths);\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\n  s.childSchemas = gatherChildSchemas(s);\n\n  s.virtuals = utils.clone(this.virtuals);\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\n  s.$implicitlyCreated = this.$implicitlyCreated;\n\n  if (this.discriminatorMapping != null) {\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\n  }\n  if (this.discriminators != null) {\n    s.discriminators = Object.assign({}, this.discriminators);\n  }\n\n  s.aliases = Object.assign({}, this.aliases);\n\n  // Bubble up `init` for backwards compat\n  s.on('init', v => this.emit('init', v));\n\n  return s;\n};\n\n/**\n * Returns a new schema that has the picked `paths` from this schema.\n *\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\n *\n * ####Example:\n *\n *     const schema = Schema({ name: String, age: Number });\n *     // Creates a new schema with the same `name` path as `schema`,\n *     // but no `age` path.\n *     const newSchema = schema.pick(['name']);\n *\n *     newSchema.path('name'); // SchemaString { ... }\n *     newSchema.path('age'); // undefined\n *\n * @param {Array} paths list of paths to pick\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\n * @return {Schema}\n * @api public\n */\n\nSchema.prototype.pick = function(paths, options) {\n  const newSchema = new Schema({}, options || this.options);\n  if (!Array.isArray(paths)) {\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\n      'got \"' + typeof paths + '\"');\n  }\n\n  for (const path of paths) {\n    if (this.nested[path]) {\n      newSchema.add({ [path]: get(this.tree, path) });\n    } else {\n      const schematype = this.path(path);\n      if (schematype == null) {\n        throw new MongooseError('Path `' + path + '` is not in the schema');\n      }\n      newSchema.add({ [path]: schematype });\n    }\n  }\n\n  return newSchema;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  if (options && options.safe === false) {\n    options.safe = { w: 0 };\n  }\n\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\n\n  const baseOptions = get(this, 'base.options', {});\n  options = utils.options({\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\n    strictQuery: 'strictQuery' in baseOptions ? baseOptions.strictQuery : false,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false, // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false, // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type',\n    typePojoToMixed: 'typePojoToMixed' in baseOptions ? baseOptions.typePojoToMixed : true\n  }, utils.clone(options));\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  if (options.optimisticConcurrency && !options.versionKey) {\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\n  }\n\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     const ToySchema = new Schema();\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n *     const TurboManSchema = new Schema();\n *     // You can also `add()` another schema and copy over all paths, virtuals,\n *     // getters, setters, indexes, methods, and statics.\n *     TurboManSchema.add(ToySchema).add({ year: Number });\n *\n * @param {Object|Schema} obj plain object with paths to add, or another schema\n * @param {String} [prefix] path to prefix the newly added paths with\n * @return {Schema} the Schema instance\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  if (obj instanceof Schema) {\n    merge(this, obj);\n    return this;\n  }\n\n  // Special case: setting top-level `_id` to false should convert to disabling\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\n  // codebases use it (see gh-7516, gh-7512).\n  if (obj._id === false && prefix == null) {\n    this.options._id = false;\n  }\n\n  prefix = prefix || '';\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const fullPath = prefix + key;\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + fullPath +\n        '`, got value \"' + obj[key] + '\"');\n    }\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\n    if (key === '_id' && obj[key] === false) {\n      continue;\n    }\n    if (obj[key] instanceof VirtualType) {\n      this.virtual(obj[key]);\n      continue;\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\n        '`, got value \"' + obj[key][0] + '\"');\n    }\n\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\n      // Special-case: Non-options definitely a path so leaf at this node\n      // Examples: Schema instances, SchemaType instances\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    } else if (Object.keys(obj[key]).length < 1) {\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(fullPath, obj[key]); // mixed type\n    } else if (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && obj[key].type.type)) {\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\n      // nested object { last: { name: String }}\n      this.nested[fullPath] = true;\n      this.add(obj[key], fullPath + '.');\n    } else {\n      // There IS a bona-fide type key that may also be a POJO\n      if (!this.options.typePojoToMixed && utils.isPOJO(obj[key][this.options.typeKey])) {\n        // If a POJO is the value of a type key, make it a subdocument\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        // Propage `typePojoToMixed` to implicitly created schemas\n        const opts = { typePojoToMixed: false };\n        const _schema = new Schema(obj[key][this.options.typeKey], opts);\n        const schemaWrappedPath = Object.assign({}, obj[key], { [this.options.typeKey]: _schema });\n        this.path(prefix + key, schemaWrappedPath);\n      } else {\n        // Either the type is non-POJO or we interpret it as Mixed anyway\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]);\n      }\n    }\n  }\n\n  const addedKeys = Object.keys(obj).\n    map(key => prefix ? prefix + key : key);\n  aliasFields(this, addedKeys);\n  return this;\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations\n * because they conflict with Mongoose functionality. If you create a schema\n * using `new Schema()` with one of these property names, Mongoose will throw\n * an error.\n *\n * - _posts\n * - _pres\n * - collection\n * - emit\n * - errors\n * - get\n * - init\n * - isModified\n * - isNew\n * - listeners\n * - modelName\n * - on\n * - once\n * - populated\n * - prototype\n * - remove\n * - removeListener\n * - save\n * - schema\n * - toObject\n * - validate\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      const schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nSchema.prototype.reserved = Schema.reserved;\nconst reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.listeners =\nreserved.on =\nreserved.removeListener =\n// document properties and functions\nreserved.collection =\nreserved.errors =\nreserved.get =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.populated =\nreserved.remove =\nreserved.save =\nreserved.schema =\nreserved.toObject =\nreserved.validate = 1;\n\n/*!\n * Document keys to print warnings for\n */\n\nconst warnings = {};\nwarnings.increment = '`increment` should not be used as a schema path name ' +\n    'unless you have disabled versioning.';\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n  if (obj === undefined) {\n    let schematype = _getPath(this, path, cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // Look for maps\n    const mapPath = getMapPath(this, path);\n    if (mapPath != null) {\n      return mapPath;\n    }\n\n    // Look if a parent of this path is mixed\n    schematype = this.hasMixedParent(cleanPath);\n    if (schematype != null) {\n      return schematype;\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n      ? getPositionalPath(this, path)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  const firstPieceOfPath = path.split('.')[0];\n  if (reserved[firstPieceOfPath]) {\n    throw new Error('`' + firstPieceOfPath + '` may not be used as a schema pathname');\n  }\n\n  if (warnings[path]) {\n    console.log('WARN: ' + warnings[path]);\n  }\n\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\n    validateRef(obj.ref, path);\n  }\n\n  // update the tree\n  const subpaths = path.split(/\\./);\n  const last = subpaths.pop();\n  let branch = this.tree;\n  let fullPath = '';\n\n  for (const sub of subpaths) {\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\n    if (!branch[sub]) {\n      this.nested[fullPath] = true;\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      const msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + fullPath\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  }\n\n  branch[last] = utils.clone(obj);\n\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\n  const schemaType = this.paths[path];\n\n  if (schemaType.$isSchemaMap) {\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\n    // The '$' is to imply this path should never be stored in MongoDB so we\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\n    const mapPath = path + '.$*';\n    let _mapType = { type: {} };\n    if (utils.hasUserDefinedProperty(obj, 'of')) {\n      const isInlineSchema = utils.isPOJO(obj.of) &&\n        Object.keys(obj.of).length > 0 &&\n        !utils.hasUserDefinedProperty(obj.of, this.options.typeKey);\n      _mapType = isInlineSchema ? new Schema(obj.of) : obj.of;\n    }\n    this.paths[mapPath] = this.interpretAsType(mapPath,\n      _mapType, this.options);\n    schemaType.$__schemaType = this.paths[mapPath];\n  }\n\n  if (schemaType.$isSingleNested) {\n    for (const key in schemaType.schema.paths) {\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\n    }\n    for (const key in schemaType.schema.singleNestedPaths) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.singleNestedPaths[key];\n    }\n    for (const key in schemaType.schema.subpaths) {\n      this.singleNestedPaths[path + '.' + key] =\n        schemaType.schema.subpaths[key];\n    }\n\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.caster.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.caster\n    });\n  } else if (schemaType.$isMongooseDocumentArray) {\n    Object.defineProperty(schemaType.schema, 'base', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: this.base\n    });\n\n    schemaType.casterConstructor.base = this.base;\n    this.childSchemas.push({\n      schema: schemaType.schema,\n      model: schemaType.casterConstructor\n    });\n  }\n\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\n    let arrayPath = path;\n    let _schemaType = schemaType;\n\n    const toAdd = [];\n    while (_schemaType.$isMongooseArray) {\n      arrayPath = arrayPath + '.$';\n\n      // Skip arrays of document arrays\n      if (_schemaType.$isMongooseDocumentArray) {\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\n      } else {\n        _schemaType.caster._arrayPath = arrayPath;\n        _schemaType = _schemaType.caster.clone();\n      }\n\n      _schemaType.path = arrayPath;\n      toAdd.push(_schemaType);\n    }\n\n    for (const _schemaType of toAdd) {\n      this.subpaths[_schemaType.path] = _schemaType;\n    }\n  }\n\n  if (schemaType.$isMongooseDocumentArray) {\n    for (const key of Object.keys(schemaType.schema.paths)) {\n      this.subpaths[path + '.' + key] = schemaType.schema.paths[key];\n      schemaType.schema.paths[key].$isUnderneathDocArray = true;\n    }\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\n      this.subpaths[path + '.' + key] = schemaType.schema.subpaths[key];\n      schemaType.schema.subpaths[key].$isUnderneathDocArray = true;\n    }\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\n      this.subpaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\n      schemaType.schema.singleNestedPaths[key].$isUnderneathDocArray = true;\n    }\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction gatherChildSchemas(schema) {\n  const childSchemas = [];\n\n  for (const path of Object.keys(schema.paths)) {\n    const schematype = schema.paths[path];\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\n    }\n  }\n\n  return childSchemas;\n}\n\n/*!\n * ignore\n */\n\nfunction _getPath(schema, path, cleanPath) {\n  if (schema.paths.hasOwnProperty(path)) {\n    return schema.paths[path];\n  }\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\n    return schema.subpaths[cleanPath];\n  }\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath)) {\n    return schema.singleNestedPaths[cleanPath];\n  }\n\n  return null;\n}\n\n/*!\n * ignore\n */\n\nfunction _pathToPositionalSyntax(path) {\n  if (!/\\.\\d+/.test(path)) {\n    return path;\n  }\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\n}\n\n/*!\n * ignore\n */\n\nfunction getMapPath(schema, path) {\n  for (const _path of Object.keys(schema.paths)) {\n    if (!_path.includes('.$*')) {\n      continue;\n    }\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\n    if (re.test(path)) {\n      return schema.paths[_path];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The Mongoose instance this schema is associated with\n *\n * @property base\n * @api private\n */\n\nObject.defineProperty(Schema.prototype, 'base', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.prototype.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    const clone = obj.clone();\n    clone.path = path;\n    return clone;\n  }\n\n  // If this schema has an associated Mongoose object, use the Mongoose object's\n  // copy of SchemaTypes re: gh-7158 gh-6933\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\n\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\n    const constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      const oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n  let name;\n\n  if (utils.isPOJO(type) || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\n    // if it was specified through { type } look for `cast`\n    let cast = (type === Array || type === 'array')\n      ? obj.cast\n      : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || (options.typeKey === 'type' && cast.type.type))\n        && utils.isPOJO(cast)) {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        const childSchemaOptions = { minimize: options.minimize };\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        // propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        if (options.hasOwnProperty('typePojoToMixed')) {\n          childSchemaOptions.typePojoToMixed = options.typePojoToMixed;\n        }\n\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\n          childSchemaOptions._id = this._userProvidedOptions._id;\n        } else if (Schema.Types.DocumentArray.defaultOptions &&\n            Schema.Types.DocumentArray.defaultOptions._id != null) {\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\n        }\n\n        const childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      if (!MongooseTypes.hasOwnProperty(name)) {\n        throw new TypeError('Invalid schema configuration: ' +\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\n          'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else if (typeof type === 'function' || typeof type === 'object') {\n    name = type.schemaName || utils.getFunctionName(type);\n  } else {\n    name = type == null ? '' + type : type.toString();\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\n  // doesn't line up with Mongoose's.\n  if (name === 'ObjectID') {\n    name = 'ObjectId';\n  }\n\n  if (MongooseTypes[name] == null) {\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\n      `a valid type at path \\`${path}\\`. See ` +\n      'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\n  }\n\n  return new MongooseTypes[name](path, obj);\n};\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and the schemaType instance.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\n *     userSchema.eachPath((pathname, schematype) => {\n *       // Prints twice:\n *       // name SchemaString { ... }\n *       // registeredAt SchemaDate { ... }\n *       console.log(pathname, schematype);\n *     });\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  const keys = Object.keys(this.paths);\n  const len = keys.length;\n\n  for (let i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * ####Example:\n *     const s = new Schema({\n *       name: { type: String, required: true },\n *       age: { type: String, required: true },\n *       notes: String\n *     });\n *     s.requiredPaths(); // [ 'age', 'name' ]\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  const paths = Object.keys(this.paths);\n  let i = paths.length;\n  const ret = [];\n\n  while (i--) {\n    const path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * ####Example:\n *     const s = new Schema({ name: String, nested: { foo: String } });\n *     s.virtual('foo').get(() => 42);\n *     s.pathType('name'); // \"real\"\n *     s.pathType('nested'); // \"nested\"\n *     s.pathType('foo'); // \"virtual\"\n *     s.pathType('fail'); // \"adhocOrUndefined\"\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  // Convert to '.$' to check subpaths re: gh-6405\n  const cleanPath = _pathToPositionalSyntax(path);\n\n  if (this.paths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.virtuals.hasOwnProperty(path)) {\n    return 'virtual';\n  }\n  if (this.nested.hasOwnProperty(path)) {\n    return 'nested';\n  }\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n  if (this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path)) {\n    return 'real';\n  }\n\n  // Look for maps\n  const mapPath = getMapPath(this, path);\n  if (mapPath != null) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  const subpaths = path.split(/\\./g);\n  path = '';\n  for (let i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (path in this.paths &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return this.paths[path];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  return setupTimestamps(this, timestamps);\n};\n\n/*!\n * ignore. Deprecated re: #6405\n */\n\nfunction getPositionalPathType(self, path) {\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths.hasOwnProperty(subpaths[0]) ?\n      self.paths[subpaths[0]] :\n      'adhocOrUndefined';\n  }\n\n  let val = self.path(subpaths[0]);\n  let isNested = false;\n  if (!val) {\n    return 'adhocOrUndefined';\n  }\n\n  const last = subpaths.length - 1;\n\n  for (let i = 1; i < subpaths.length; ++i) {\n    isNested = false;\n    const subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        val = val.$embeddedSchemaType;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      // Nested array\n      if (val instanceof MongooseTypes.Array && i !== last) {\n        val = val.caster;\n      }\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    const type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * ####Example:\n *\n *     schema.methods.print = function() { console.log(this); };\n *     schema.queue('print', []); // Print the doc every one is instantiated\n *\n *     const Model = mongoose.model('Test', schema);\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the document.\n *\n * ####Example\n *\n *     const toySchema = new Schema({ name: String, created: Date });\n *\n *     toySchema.pre('save', function(next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     });\n *\n *     toySchema.pre('validate', function(next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     });\n *\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\n *     toySchema.pre(/^find/, function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\n *       console.log(this.getFilter());\n *     });\n *\n *     toySchema.pre('deleteOne', function() {\n *       // Runs when you call `Toy.deleteOne()`\n *     });\n *\n *     toySchema.pre('deleteOne', { document: true }, function() {\n *       // Runs when you call `doc.deleteOne()`\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} callback\n * @api public\n */\n\nSchema.prototype.pre = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.pre.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.pre.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     const schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you ran a find query');\n *     });\n *\n *     schema.post(/Many$/, function(res) {\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\n *     });\n *\n *     const Model = mongoose.model('Model', schema);\n *\n *     const m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String|RegExp} The method name or regular expression to match method name\n * @param {Object} [options]\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function(name) {\n  if (name instanceof RegExp) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const fn of hookNames) {\n      if (name.test(fn)) {\n        this.post.apply(this, [fn].concat(remainingArgs));\n      }\n    }\n    return this;\n  }\n  if (Array.isArray(name)) {\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\n    for (const el of name) {\n      this.post.apply(this, [el].concat(remainingArgs));\n    }\n    return this;\n  }\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * ####Example:\n *\n *     const s = new Schema({ name: String });\n *     s.plugin(schema => console.log(schema.path('name').path));\n *     mongoose.model('Test', s); // Prints 'name'\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts && opts.deduplicate) {\n    for (const plugin of this.plugins) {\n      if (plugin.fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     const Kitty = mongoose.model('Kitty', schema);\n *\n *     const fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](./guide.html#methods)\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function(name, fn, options) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.methods[i] = name[i];\n      this.methodOptions[i] = utils.clone(options);\n    }\n  } else {\n    this.methods[name] = fn;\n    this.methodOptions[name] = utils.clone(options);\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     const schema = new Schema(..);\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\n *     schema.static('findByName', function(name) {\n *       return this.find({ name: name });\n *     });\n *\n *     const Drink = mongoose.model('Drink', schema);\n *     await Drink.findByName('LaCroix');\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n * @see Statics /docs/guide.html#statics\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (const i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets/gets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function(key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'safe':\n      setSafe(this.options, value);\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n    case '_id':\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n\n      if (value && !this.paths['_id']) {\n        addAutoId(this);\n      } else if (!value && this.paths['_id'] != null && this.paths['_id'].auto) {\n        this.remove('_id');\n      }\n      break;\n    default:\n      this.options[key] = value;\n      this._userProvidedOptions[key] = this.options[key];\n      break;\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst safeDeprecationWarning = 'Mongoose: The `safe` option for schemas is ' +\n  'deprecated. Use the `writeConcern` option instead: ' +\n  'http://bit.ly/mongoose-write-concern';\n\nconst setSafe = util.deprecate(function setSafe(options, value) {\n  options.safe = value === false ?\n    { w: 0 } :\n    value;\n}, safeDeprecationWarning);\n\n/**\n * Gets a schema option.\n *\n * ####Example:\n *\n *     schema.get('strict'); // true\n *     schema.set('strict', false);\n *     schema.get('strict'); // false\n *\n * @param {String} key option name\n * @api public\n * @return {Any} the option's value\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @receiver Schema\n * @static indexTypes\n * @api public\n */\n\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()`\n * or by `index: true` in a path's options.\n *\n * ####Example:\n *\n *     const userSchema = new Schema({\n *       email: { type: String, required: true, unique: true },\n *       registeredAt: { type: Date, index: true }\n *     });\n *\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\n *     userSchema.indexes();\n *\n * @api public\n * @return {Array} list of indexes defined in the schema\n */\n\nSchema.prototype.indexes = function() {\n  return getIndexes(this);\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (name instanceof VirtualType) {\n    return this.virtual(name.path, name.options);\n  }\n\n  options = new VirtualOptions(options);\n\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\n    if (options.localField == null) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (options.foreignField == null) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function(obj) {\n      if (mpath.has(name, obj)) {\n        const _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    const virtual = this.virtual(name);\n    virtual.options = options;\n    return virtual.\n      get(function(_v) {\n        if (this.$$populatedVirtuals &&\n          this.$$populatedVirtuals.hasOwnProperty(name)) {\n          return this.$$populatedVirtuals[name];\n        }\n        if (_v == null) return undefined;\n        return _v;\n      }).\n      set(function(_v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne || options.count) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\n            this.$$populatedVirtuals[name] = options.count ? _v : null;\n          }\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\n            return doc && typeof doc === 'object';\n          });\n        }\n      });\n  }\n\n  const virtuals = this.virtuals;\n  const parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  // Workaround for gh-8198: if virtual is under document array, make a fake\n  // virtual. See gh-8210\n  let cur = parts[0];\n  for (let i = 0; i < parts.length - 1; ++i) {\n    if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\n      const remnant = parts.slice(i + 1).join('.');\n      const v = this.paths[cur].schema.virtual(remnant);\n      v.get((v, virtual, doc) => {\n        const parent = doc.__parentArray[arrayParentSymbol];\n        const path = cur + '.' + doc.__index + '.' + remnant;\n        return parent.get(path);\n      });\n      break;\n    }\n\n    cur += '.' + parts[i + 1];\n  }\n\n  return virtuals[name];\n};\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String, age: Number });\n *     schema.remove('name');\n *     schema.path('name'); // Undefined\n *     schema.path('age'); // SchemaNumber { ... }\n *\n * @param {String|Array} path\n * @return {Schema} the Schema instance\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name) == null && !this.nested[name]) {\n        return;\n      }\n      if (this.nested[name]) {\n        const allKeys = Object.keys(this.paths).\n          concat(Object.keys(this.nested));\n        for (const path of allKeys) {\n          if (path.startsWith(name + '.')) {\n            delete this.paths[path];\n            delete this.nested[path];\n            _deletePath(this, path);\n          }\n        }\n\n        delete this.nested[name];\n        _deletePath(this, name);\n        return;\n      }\n\n      delete this.paths[name];\n      _deletePath(this, name);\n    }, this);\n  }\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _deletePath(schema, name) {\n  const pieces = name.split('.');\n  const last = pieces.pop();\n\n  let branch = schema.tree;\n\n  for (const piece of pieces) {\n    branch = branch[piece];\n  }\n\n  delete branch[last];\n}\n\n/**\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\n * to schema [virtuals](http://mongoosejs.com/docs/guide.html#virtuals),\n * [statics](http://mongoosejs.com/docs/guide.html#statics), and\n * [methods](http://mongoosejs.com/docs/guide.html#methods).\n *\n * ####Example:\n *\n * ```javascript\n * const md5 = require('md5');\n * const userSchema = new Schema({ email: String });\n * class UserClass {\n *   // `gravatarImage` becomes a virtual\n *   get gravatarImage() {\n *     const hash = md5(this.email.toLowerCase());\n *     return `https://www.gravatar.com/avatar/${hash}`;\n *   }\n *\n *   // `getProfileUrl()` becomes a document method\n *   getProfileUrl() {\n *     return `https://mysite.com/${this.email}`;\n *   }\n *\n *   // `findByEmail()` becomes a static\n *   static findByEmail(email) {\n *     return this.findOne({ email });\n *   }\n * }\n *\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\n * // and a `findByEmail()` static\n * userSchema.loadClass(UserClass);\n * ```\n *\n * @param {Function} model\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model));\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype)$/)) {\n        return;\n      }\n      const method = Object.getOwnPropertyDescriptor(model, name);\n      if (typeof method.value === 'function') {\n        this.static(name, method.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n  const resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1;\n    let foundschema;\n    let trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length) {\n            if (foundschema.schema) {\n              let ret;\n              if (parts[p] === '$' || isArrayFilter(parts[p])) {\n                if (p + 1 === parts.length) {\n                  // comments.$\n                  return foundschema;\n                }\n                // comments.$.comments.$.title\n                ret = search(parts.slice(p + 1), foundschema.schema);\n                if (ret) {\n                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                    !foundschema.schema.$isSingleNested;\n                }\n                return ret;\n              }\n              // this is the last path of the selector\n              ret = search(parts.slice(p), foundschema.schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n          }\n        } else if (foundschema.$isSchemaMap) {\n          if (p + 1 >= parts.length) {\n            return foundschema.$__schemaType;\n          }\n          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);\n          return ret;\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  const parts = path.split('.');\n  for (let i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  const _this = this;\n  const pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    let p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.startsWith('$[') && piece.endsWith(']');\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     const mongoose = require('mongoose');\n *     const ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](#schema-string-js)\n * - [Number](#schema-number-js)\n * - [Boolean](#schema-boolean-js) | Bool\n * - [Array](#schema-array-js)\n * - [Buffer](#schema-buffer-js)\n * - [Date](#schema-date-js)\n * - [ObjectId](#schema-objectid-js) | Oid\n * - [Mixed](#schema-mixed-js)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     const Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}