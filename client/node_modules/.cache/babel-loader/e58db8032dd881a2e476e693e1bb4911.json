{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = path.split('.');\n  let schema = null;\n  let type = 'adhocOrUndefined';\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schema = doc.schema.path(subpath);\n\n    if (schema == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n\n    if (schema.instance === 'Mixed') {\n      return typeOnly ? 'real' : schema;\n    }\n\n    type = doc.schema.pathType(subpath);\n\n    if ((schema.$isSingleNested || schema.$isMongooseDocumentArrayElement) && schema.schema.discriminators != null) {\n      const discriminators = schema.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' + get(schema, 'schema.options.discriminatorKey'));\n\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  } // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n\n\n  return typeOnly ? type : schema;\n};","map":{"version":3,"names":["get","require","module","exports","getEmbeddedDiscriminatorPath","doc","path","options","typeOnly","parts","split","schema","type","i","length","subpath","slice","join","instance","pathType","$isSingleNested","$isMongooseDocumentArrayElement","discriminators","discriminatorKey","rest"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js"],"sourcesContent":["'use strict';\n\nconst get = require('../get');\n\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = path.split('.');\n  let schema = null;\n  let type = 'adhocOrUndefined';\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schema = doc.schema.path(subpath);\n    if (schema == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schema.instance === 'Mixed') {\n      return typeOnly ? 'real' : schema;\n    }\n    type = doc.schema.pathType(subpath);\n    if ((schema.$isSingleNested || schema.$isMongooseDocumentArrayElement) &&\n        schema.schema.discriminators != null) {\n      const discriminators = schema.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' +\n        get(schema, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schema;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,4BAAT,CAAsCC,GAAtC,EAA2CC,IAA3C,EAAiDC,OAAjD,EAA0D;EACzEA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,MAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAzB;EACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAd;EACA,IAAIC,MAAM,GAAG,IAAb;EACA,IAAIC,IAAI,GAAG,kBAAX;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkC,EAAED,CAApC,EAAuC;IACrC,MAAME,OAAO,GAAGN,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeH,CAAC,GAAG,CAAnB,EAAsBI,IAAtB,CAA2B,GAA3B,CAAhB;IACAN,MAAM,GAAGN,GAAG,CAACM,MAAJ,CAAWL,IAAX,CAAgBS,OAAhB,CAAT;;IACA,IAAIJ,MAAM,IAAI,IAAd,EAAoB;MAClBC,IAAI,GAAG,kBAAP;MACA;IACD;;IACD,IAAID,MAAM,CAACO,QAAP,KAAoB,OAAxB,EAAiC;MAC/B,OAAOV,QAAQ,GAAG,MAAH,GAAYG,MAA3B;IACD;;IACDC,IAAI,GAAGP,GAAG,CAACM,MAAJ,CAAWQ,QAAX,CAAoBJ,OAApB,CAAP;;IACA,IAAI,CAACJ,MAAM,CAACS,eAAP,IAA0BT,MAAM,CAACU,+BAAlC,KACAV,MAAM,CAACA,MAAP,CAAcW,cAAd,IAAgC,IADpC,EAC0C;MACxC,MAAMA,cAAc,GAAGX,MAAM,CAACA,MAAP,CAAcW,cAArC;MACA,MAAMC,gBAAgB,GAAGlB,GAAG,CAACL,GAAJ,CAAQe,OAAO,GAAG,GAAV,GAC/Bf,GAAG,CAACW,MAAD,EAAS,iCAAT,CADoB,CAAzB;;MAEA,IAAIY,gBAAgB,IAAI,IAApB,IAA4BD,cAAc,CAACC,gBAAD,CAAd,IAAoC,IAApE,EAA0E;QACxE;MACD;;MACD,MAAMC,IAAI,GAAGf,KAAK,CAACO,KAAN,CAAYH,CAAC,GAAG,CAAhB,EAAmBI,IAAnB,CAAwB,GAAxB,CAAb;MACA,OAAOb,4BAA4B,CAACC,GAAG,CAACL,GAAJ,CAAQe,OAAR,CAAD,EAAmBS,IAAnB,EAAyBjB,OAAzB,CAAnC;IACD;EACF,CA7BwE,CA+BzE;;;EACA,OAAOC,QAAQ,GAAGI,IAAH,GAAUD,MAAzB;AACD,CAjCD"},"metadata":{},"sourceType":"script"}