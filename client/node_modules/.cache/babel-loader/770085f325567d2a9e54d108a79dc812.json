{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\n\nconst StrictModeError = require('./error/strict');\n\nconst Types = require('./schema/index');\n\nconst castTextSearch = require('./schema/operators/text');\n\nconst get = require('./helpers/get');\n\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\n\nconst isOperator = require('./helpers/query/isOperator');\n\nconst util = require('util');\n\nconst isObject = require('./helpers/isObject');\n\nconst isMongooseObject = require('./helpers/isMongooseObject');\n\nconst ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n/**\n * Handles internal casting for query filters.\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} options the query options\n * @param {Query} context passed to setters\n * @api private\n */\n\nmodule.exports = function cast(schema, obj, options, context) {\n  if (Array.isArray(obj)) {\n    throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n  }\n\n  if (obj == null) {\n    return obj;\n  } // bson 1.x has the unfortunate tendency to remove filters that have a top-level\n  // `_bsontype` property. But we should still allow ObjectIds because\n  // `Collection#find()` has a special case to support `find(objectid)`.\n  // Should remove this when we upgrade to bson 4.x. See gh-8222, gh-8268\n\n\n  if (obj.hasOwnProperty('_bsontype') && obj._bsontype !== 'ObjectID') {\n    delete obj._bsontype;\n  }\n\n  if (schema != null && schema.discriminators != null && obj[schema.options.discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[schema.options.discriminatorKey]) || schema;\n  }\n\n  const paths = Object.keys(obj);\n  let i = paths.length;\n\n  let _keys;\n\n  let any$conditionals;\n  let schematype;\n  let nested;\n  let path;\n  let type;\n  let val;\n  options = options || {};\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      if (!Array.isArray(val)) {\n        throw new CastError('Array', val, path);\n      }\n\n      for (let k = 0; k < val.length; ++k) {\n        if (val[k] == null || typeof val[k] !== 'object') {\n          throw new CastError('Object', val[k], path + '.' + k);\n        }\n\n        val[k] = cast(schema, val[k], options, context);\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val, options, context);\n    } else if (path === '$text') {\n      val = castTextSearch(val, path);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path); // Check for embedded discriminator paths\n\n      if (!schematype) {\n        const split = path.split('.');\n        let j = split.length;\n\n        while (j--) {\n          const pathFirstHalf = split.slice(0, j).join('.');\n          const pathLastHalf = split.slice(j).join('.');\n\n          const _schematype = schema.path(pathFirstHalf);\n\n          const discriminatorKey = get(_schematype, 'schema.options.discriminatorKey'); // gh-6027: if we haven't found the schematype but this path is\n          // underneath an embedded discriminator and the embedded discriminator\n          // key is in the query, use the embedded discriminator schema\n\n          if (_schematype != null && get(_schematype, 'schema.discriminators') != null && discriminatorKey != null && pathLastHalf !== discriminatorKey) {\n            const discriminatorVal = get(obj, pathFirstHalf + '.' + discriminatorKey);\n\n            if (discriminatorVal != null) {\n              schematype = _schematype.schema.discriminators[discriminatorVal].path(pathLastHalf);\n            }\n          }\n        }\n      }\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        const split = path.split('.');\n        let j = split.length;\n        let pathFirstHalf;\n        let pathLastHalf;\n        let remainingConds; // Find the part of the var path that is a path of the Schema\n\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n\n          if (schematype) {\n            break;\n          }\n        } // If a substring of the input path resolves to an actual real path...\n\n\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n            obj[path] = cast(schematype.caster.schema, remainingConds, options, context)[pathLastHalf];\n          } else {\n            obj[path] = val;\n          }\n\n          continue;\n        }\n\n        if (isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n          let geo = '';\n\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            const numbertype = new Types.Number('__QueryCasting__');\n            let value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQueryWrapper({\n                val: val.$maxDistance,\n                context: context\n              });\n            }\n\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQueryWrapper({\n                val: val.$minDistance,\n                context: context\n              });\n            }\n\n            if (geo === '$within') {\n              const withinType = value.$center || value.$centerSphere || value.$box || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within parameter: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' && typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') && value.$geometry && typeof value.$geometry.type === 'string' && Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQueryWrapper({\n                  val: value.$maxDistance,\n                  context: context\n                });\n              }\n\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQueryWrapper({\n                  val: value.$minDistance,\n                  context: context\n                });\n              }\n\n              if (isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({\n                    virtuals: false\n                  });\n                }\n\n                const geoWithinType = value.$geometry.type;\n\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' + geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center || value.$centerSphere;\n\n                if (isMongooseObject(value)) {\n                  value = value.toObject({\n                    virtuals: false\n                  });\n                }\n              }\n            }\n\n            _cast(value, numbertype, context);\n\n            continue;\n          }\n        }\n\n        if (schema.nested[path]) {\n          continue;\n        }\n\n        if (options.upsert && options.strict) {\n          if (options.strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' + 'schema, strict mode is `true`, and upsert is `true`.');\n        } else if (options.strictQuery === 'throw') {\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' + 'schema and strictQuery is \\'throw\\'.');\n        } else if (options.strictQuery) {\n          delete obj[path];\n        }\n      } else if (val == null) {\n        continue;\n      } else if (val.constructor.name === 'Object') {\n        any$conditionals = Object.keys(val).some(isOperator);\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQueryWrapper({\n            val: val,\n            context: context\n          });\n        } else {\n          const ks = Object.keys(val);\n          let $cond;\n          let k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n\n            if ($cond === '$not') {\n              if (nested && schematype && !schematype.caster) {\n                _keys = Object.keys(nested);\n\n                if (_keys.length && isOperator(_keys[0])) {\n                  for (const key in nested) {\n                    nested[key] = schematype.castForQueryWrapper({\n                      $conditional: key,\n                      val: nested[key],\n                      context: context\n                    });\n                  }\n                } else {\n                  val[$cond] = schematype.castForQueryWrapper({\n                    $conditional: $cond,\n                    val: nested,\n                    context: context\n                  });\n                }\n\n                continue;\n              }\n\n              cast(schematype.caster ? schematype.caster.schema : schema, nested, options, context);\n            } else {\n              val[$cond] = schematype.castForQueryWrapper({\n                $conditional: $cond,\n                val: nested,\n                context: context\n              });\n            }\n          }\n        }\n      } else if (Array.isArray(val) && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        const casted = [];\n        const valuesArray = val;\n\n        for (const _val of valuesArray) {\n          casted.push(schematype.castForQueryWrapper({\n            val: _val,\n            context: context\n          }));\n        }\n\n        obj[path] = {\n          $in: casted\n        };\n      } else {\n        obj[path] = schematype.castForQueryWrapper({\n          val: val,\n          context: context\n        });\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype, context) {\n  if (Array.isArray(val)) {\n    val.forEach(function (item, i) {\n      if (Array.isArray(item) || isObject(item)) {\n        return _cast(item, numbertype, context);\n      }\n\n      val[i] = numbertype.castForQueryWrapper({\n        val: item,\n        context: context\n      });\n    });\n  } else {\n    const nearKeys = Object.keys(val);\n    let nearLen = nearKeys.length;\n\n    while (nearLen--) {\n      const nkey = nearKeys[nearLen];\n      const item = val[nkey];\n\n      if (Array.isArray(item) || isObject(item)) {\n        _cast(item, numbertype, context);\n\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery({\n          val: item,\n          context: context\n        });\n      }\n    }\n  }\n}","map":{"version":3,"names":["CastError","require","StrictModeError","Types","castTextSearch","get","getSchemaDiscriminatorByValue","isOperator","util","isObject","isMongooseObject","ALLOWED_GEOWITHIN_GEOJSON_TYPES","module","exports","cast","schema","obj","options","context","Array","isArray","Error","inspect","hasOwnProperty","_bsontype","discriminators","discriminatorKey","paths","Object","keys","i","length","_keys","any$conditionals","schematype","nested","path","type","val","k","toString","split","j","pathFirstHalf","slice","join","pathLastHalf","_schematype","discriminatorVal","remainingConds","caster","geo","$near","$nearSphere","$within","$geoIntersects","$geoWithin","numbertype","Number","value","$maxDistance","castForQueryWrapper","$minDistance","withinType","$center","$centerSphere","$box","$polygon","JSON","stringify","coordinates","$geometry","toObject","transform","virtuals","geoWithinType","indexOf","_cast","upsert","strict","strictQuery","constructor","name","some","ks","$cond","key","$conditional","instance","casted","valuesArray","_val","push","$in","forEach","item","nearKeys","nearLen","nkey","castForQuery"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/cast.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\nconst StrictModeError = require('./error/strict');\nconst Types = require('./schema/index');\nconst castTextSearch = require('./schema/operators/text');\nconst get = require('./helpers/get');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst isOperator = require('./helpers/query/isOperator');\nconst util = require('util');\nconst isObject = require('./helpers/isObject');\nconst isMongooseObject = require('./helpers/isMongooseObject');\n\nconst ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n\n/**\n * Handles internal casting for query filters.\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} options the query options\n * @param {Query} context passed to setters\n * @api private\n */\nmodule.exports = function cast(schema, obj, options, context) {\n  if (Array.isArray(obj)) {\n    throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n  }\n\n  if (obj == null) {\n    return obj;\n  }\n\n  // bson 1.x has the unfortunate tendency to remove filters that have a top-level\n  // `_bsontype` property. But we should still allow ObjectIds because\n  // `Collection#find()` has a special case to support `find(objectid)`.\n  // Should remove this when we upgrade to bson 4.x. See gh-8222, gh-8268\n  if (obj.hasOwnProperty('_bsontype') && obj._bsontype !== 'ObjectID') {\n    delete obj._bsontype;\n  }\n\n  if (schema != null && schema.discriminators != null && obj[schema.options.discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[schema.options.discriminatorKey]) || schema;\n  }\n\n  const paths = Object.keys(obj);\n  let i = paths.length;\n  let _keys;\n  let any$conditionals;\n  let schematype;\n  let nested;\n  let path;\n  let type;\n  let val;\n\n  options = options || {};\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      if (!Array.isArray(val)) {\n        throw new CastError('Array', val, path);\n      }\n      for (let k = 0; k < val.length; ++k) {\n        if (val[k] == null || typeof val[k] !== 'object') {\n          throw new CastError('Object', val[k], path + '.' + k);\n        }\n        val[k] = cast(schema, val[k], options, context);\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val, options, context);\n    } else if (path === '$text') {\n      val = castTextSearch(val, path);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path);\n\n      // Check for embedded discriminator paths\n      if (!schematype) {\n        const split = path.split('.');\n        let j = split.length;\n        while (j--) {\n          const pathFirstHalf = split.slice(0, j).join('.');\n          const pathLastHalf = split.slice(j).join('.');\n          const _schematype = schema.path(pathFirstHalf);\n          const discriminatorKey = get(_schematype, 'schema.options.discriminatorKey');\n\n          // gh-6027: if we haven't found the schematype but this path is\n          // underneath an embedded discriminator and the embedded discriminator\n          // key is in the query, use the embedded discriminator schema\n          if (_schematype != null &&\n              get(_schematype, 'schema.discriminators') != null &&\n              discriminatorKey != null &&\n              pathLastHalf !== discriminatorKey) {\n            const discriminatorVal = get(obj, pathFirstHalf + '.' + discriminatorKey);\n            if (discriminatorVal != null) {\n              schematype = _schematype.schema.discriminators[discriminatorVal].\n                path(pathLastHalf);\n            }\n          }\n        }\n      }\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        const split = path.split('.');\n        let j = split.length;\n        let pathFirstHalf;\n        let pathLastHalf;\n        let remainingConds;\n\n        // Find the part of the var path that is a path of the Schema\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n          if (schematype) {\n            break;\n          }\n        }\n\n        // If a substring of the input path resolves to an actual real path...\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n            obj[path] = cast(schematype.caster.schema, remainingConds, options, context)[pathLastHalf];\n          } else {\n            obj[path] = val;\n          }\n          continue;\n        }\n\n        if (isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n\n          let geo = '';\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            const numbertype = new Types.Number('__QueryCasting__');\n            let value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQueryWrapper({\n                val: val.$maxDistance,\n                context: context\n              });\n            }\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQueryWrapper({\n                val: val.$minDistance,\n                context: context\n              });\n            }\n\n            if (geo === '$within') {\n              const withinType = value.$center\n                  || value.$centerSphere\n                  || value.$box\n                  || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within parameter: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' &&\n                typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') &&\n                value.$geometry && typeof value.$geometry.type === 'string' &&\n                Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQueryWrapper({\n                  val: value.$maxDistance,\n                  context: context\n                });\n              }\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQueryWrapper({\n                  val: value.$minDistance,\n                  context: context\n                });\n              }\n              if (isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({ virtuals: false });\n                }\n                const geoWithinType = value.$geometry.type;\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' +\n                    geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center ||\n                  value.$centerSphere;\n                if (isMongooseObject(value)) {\n                  value = value.toObject({ virtuals: false });\n                }\n              }\n            }\n\n            _cast(value, numbertype, context);\n            continue;\n          }\n        }\n\n        if (schema.nested[path]) {\n          continue;\n        }\n        if (options.upsert && options.strict) {\n          if (options.strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema, strict mode is `true`, and upsert is `true`.');\n        } else if (options.strictQuery === 'throw') {\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema and strictQuery is \\'throw\\'.');\n        } else if (options.strictQuery) {\n          delete obj[path];\n        }\n      } else if (val == null) {\n        continue;\n      } else if (val.constructor.name === 'Object') {\n        any$conditionals = Object.keys(val).some(isOperator);\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQueryWrapper({\n            val: val,\n            context: context\n          });\n        } else {\n          const ks = Object.keys(val);\n          let $cond;\n\n          let k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n\n            if ($cond === '$not') {\n              if (nested && schematype && !schematype.caster) {\n                _keys = Object.keys(nested);\n                if (_keys.length && isOperator(_keys[0])) {\n                  for (const key in nested) {\n                    nested[key] = schematype.castForQueryWrapper({\n                      $conditional: key,\n                      val: nested[key],\n                      context: context\n                    });\n                  }\n                } else {\n                  val[$cond] = schematype.castForQueryWrapper({\n                    $conditional: $cond,\n                    val: nested,\n                    context: context\n                  });\n                }\n                continue;\n              }\n              cast(schematype.caster ? schematype.caster.schema : schema, nested, options, context);\n            } else {\n              val[$cond] = schematype.castForQueryWrapper({\n                $conditional: $cond,\n                val: nested,\n                context: context\n              });\n            }\n          }\n        }\n      } else if (Array.isArray(val) && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        const casted = [];\n        const valuesArray = val;\n\n        for (const _val of valuesArray) {\n          casted.push(schematype.castForQueryWrapper({\n            val: _val,\n            context: context\n          }));\n        }\n\n        obj[path] = { $in: casted };\n      } else {\n        obj[path] = schematype.castForQueryWrapper({\n          val: val,\n          context: context\n        });\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype, context) {\n  if (Array.isArray(val)) {\n    val.forEach(function(item, i) {\n      if (Array.isArray(item) || isObject(item)) {\n        return _cast(item, numbertype, context);\n      }\n      val[i] = numbertype.castForQueryWrapper({ val: item, context: context });\n    });\n  } else {\n    const nearKeys = Object.keys(val);\n    let nearLen = nearKeys.length;\n    while (nearLen--) {\n      const nkey = nearKeys[nearLen];\n      const item = val[nkey];\n      if (Array.isArray(item) || isObject(item)) {\n        _cast(item, numbertype, context);\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery({ val: item, context: context });\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}