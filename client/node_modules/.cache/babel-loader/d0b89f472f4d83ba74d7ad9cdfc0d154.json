{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\n\nconst get = require('../helpers/get');\n\nconst util = require('util');\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const stringValue = getStringValue(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, stringValue, path, messageFormat);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n  /*!\n   * ignore\n   */\n\n\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n  }\n  /*!\n   * ignore\n   * @param {Readonly<CastError>} other\n   */\n\n\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n  }\n  /*!\n   * ignore\n   */\n\n\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path, this.messageFormat);\n  }\n\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n\n  return stringValue;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = get(schemaType, 'options.cast', null);\n\n  if (typeof messageFormat === 'string') {\n    return messageFormat;\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction formatMessage(model, kind, stringValue, path, messageFormat) {\n  if (messageFormat != null) {\n    let ret = messageFormat.replace('{KIND}', kind).replace('{VALUE}', stringValue).replace('{PATH}', path);\n\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else {\n    let ret = 'Cast to ' + kind + ' failed for value ' + stringValue + ' at path \"' + path + '\"';\n\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n\n    return ret;\n  }\n}\n/*!\n * exports\n */\n\n\nmodule.exports = CastError;","map":{"version":3,"names":["MongooseError","require","get","util","CastError","constructor","type","value","path","reason","schemaType","arguments","length","stringValue","getStringValue","messageFormat","getMessageFormat","msg","formatMessage","init","kind","copy","other","message","setModel","model","Object","defineProperty","prototype","inspect","replace","startsWith","ret","modelName","module","exports"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/error/cast.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./mongooseError');\nconst get = require('../helpers/get');\nconst util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const stringValue = getStringValue(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, stringValue, path, messageFormat);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n\n  /*!\n   * ignore\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n  }\n\n  /*!\n   * ignore\n   * @param {Readonly<CastError>} other\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n  }\n\n  /*!\n   * ignore\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path,\n      this.messageFormat);\n  }\n}\n\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\n\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\n\nfunction getMessageFormat(schemaType) {\n  const messageFormat = get(schemaType, 'options.cast', null);\n  if (typeof messageFormat === 'string') {\n    return messageFormat;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction formatMessage(model, kind, stringValue, path, messageFormat) {\n  if (messageFormat != null) {\n    let ret = messageFormat.\n      replace('{KIND}', kind).\n      replace('{VALUE}', stringValue).\n      replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n\n    return ret;\n  } else {\n    let ret = 'Cast to ' + kind + ' failed for value ' +\n      stringValue + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n\n    return ret;\n  }\n}\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}