{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst ObjectExpectedError = require('../error/objectExpected');\n\nconst SchemaSingleNestedOptions = require('../options/SchemaSingleNestedOptions');\n\nconst SchemaType = require('../schematype');\n\nconst $exists = require('./operators/exists');\n\nconst castToNumber = require('./operators/helpers').castToNumber;\n\nconst discriminator = require('../helpers/model/discriminator');\n\nconst geospatial = require('./operators/geospatial');\n\nconst get = require('../helpers/get');\n\nconst getConstructor = require('../helpers/discriminator/getConstructor');\n\nconst handleIdOption = require('../helpers/schema/handleIdOption');\n\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nlet Subdocument;\nmodule.exports = SingleNestedPath;\n/**\n * Single nested subdocument SchemaType constructor.\n *\n * @param {Schema} schema\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SingleNestedPath(schema, path, options) {\n  schema = handleIdOption(schema, options);\n  this.caster = _createConstructor(schema);\n  this.caster.path = path;\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n/*!\n * ignore\n */\n\n\nSingleNestedPath.prototype = Object.create(SchemaType.prototype);\nSingleNestedPath.prototype.constructor = SingleNestedPath;\nSingleNestedPath.prototype.OptionsConstructor = SchemaSingleNestedOptions;\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, baseClass) {\n  // lazy load\n  Subdocument || (Subdocument = require('../types/subdocument'));\n\n  const _embedded = function SingleNested(value, path, parent) {\n    const _this = this;\n\n    this.$parent = parent;\n    Subdocument.apply(this, arguments);\n    this.$session(this.ownerDocument().$session());\n\n    if (parent) {\n      parent.on('save', function () {\n        _this.emit('save', _this);\n\n        _this.constructor.emit('save', _this);\n      });\n      parent.on('isNew', function (val) {\n        _this.isNew = val;\n\n        _this.emit('isNew', val);\n\n        _this.constructor.emit('isNew', val);\n      });\n    }\n  };\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  _embedded.prototype = Object.create(proto);\n\n  _embedded.prototype.$__setSchema(schema);\n\n  _embedded.prototype.constructor = _embedded;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.events = new EventEmitter();\n\n  _embedded.prototype.toBSON = function () {\n    return this.toObject(internalToObjectOptions);\n  }; // apply methods\n\n\n  for (const i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  } // apply statics\n\n\n  for (const i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n/*!\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\n\nSingleNestedPath.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val) {\n  return {\n    $geometry: this.castForQuery(val.$geometry)\n  };\n};\n/*!\n * ignore\n */\n\n\nSingleNestedPath.prototype.$conditionalHandlers.$near = SingleNestedPath.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\nSingleNestedPath.prototype.$conditionalHandlers.$within = SingleNestedPath.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\nSingleNestedPath.prototype.$conditionalHandlers.$geoIntersects = geospatial.cast$geoIntersects;\nSingleNestedPath.prototype.$conditionalHandlers.$minDistance = castToNumber;\nSingleNestedPath.prototype.$conditionalHandlers.$maxDistance = castToNumber;\nSingleNestedPath.prototype.$conditionalHandlers.$exists = $exists;\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nSingleNestedPath.prototype.cast = function (val, doc, init, priorVal) {\n  if (val && val.$isSingleNested && val.parent === doc) {\n    return val;\n  }\n\n  if (val != null && (typeof val !== 'object' || Array.isArray(val))) {\n    throw new ObjectExpectedError(this.path, val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n  let subdoc; // Only pull relevant selected paths and pull out the base path\n\n  const parentSelected = get(doc, '$__.selected', {});\n  const path = this.path;\n  const selected = Object.keys(parentSelected).reduce((obj, key) => {\n    if (key.startsWith(path + '.')) {\n      obj[key.substr(path.length + 1)] = parentSelected[key];\n    }\n\n    return obj;\n  }, {});\n\n  if (init) {\n    subdoc = new Constructor(void 0, selected, doc);\n    subdoc.init(val);\n  } else {\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, selected, doc, undefined, {\n        priorDoc: priorVal\n      });\n    }\n\n    return new Constructor(val, selected, doc, undefined, {\n      priorDoc: priorVal\n    });\n  }\n\n  return subdoc;\n};\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\n\nSingleNestedPath.prototype.castForQuery = function ($conditional, val, options) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  if (val == null) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n  const overrideStrict = options != null && options.strict != null ? options.strict : void 0;\n\n  try {\n    val = new Constructor(val, overrideStrict);\n  } catch (error) {\n    // Make sure we always wrap in a CastError (gh-6803)\n    if (!(error instanceof CastError)) {\n      throw new CastError('Embedded', val, this.path, error, this);\n    }\n\n    throw error;\n  }\n\n  return val;\n};\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\n\nSingleNestedPath.prototype.doValidate = function (value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (options && options.skipSchemaValidators) {\n    if (!(value instanceof Constructor)) {\n      value = new Constructor(value, null, scope);\n    }\n\n    return value.validate(fn);\n  }\n\n  SchemaType.prototype.doValidate.call(this, value, function (error) {\n    if (error) {\n      return fn(error);\n    }\n\n    if (!value) {\n      return fn(null);\n    }\n\n    value.validate(fn);\n  }, scope, options);\n};\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\n\nSingleNestedPath.prototype.doValidateSync = function (value, scope, options) {\n  if (!options || !options.skipSchemaValidators) {\n    const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n\n    if (schemaTypeError) {\n      return schemaTypeError;\n    }\n  }\n\n  if (!value) {\n    return;\n  }\n\n  return value.validateSync();\n};\n/**\n * Adds a discriminator to this single nested subdocument.\n *\n * ####Example:\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shape: shapeSchema });\n *\n *     const singleNestedPath = parentSchema.path('shape');\n *     singleNestedPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {String} [value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @see discriminators /docs/discriminators.html\n * @api public\n */\n\n\nSingleNestedPath.prototype.discriminator = function (name, schema, value) {\n  schema = discriminator(this.caster, name, schema, value);\n  this.caster.discriminators[name] = _createConstructor(schema, this.caster);\n  return this.caster.discriminators[name];\n};\n/**\n * Sets a default option for all SingleNestedPath instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Embedded.set('required', true);\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\n\nSingleNestedPath.defaultOptions = {};\nSingleNestedPath.set = SchemaType.set;\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype.clone = function () {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.schema, this.path, options);\n  schematype.validators = this.validators.slice();\n\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n\n  schematype.caster.discriminators = Object.assign({}, this.caster.discriminators);\n  return schematype;\n};","map":{"version":3,"names":["CastError","require","EventEmitter","ObjectExpectedError","SchemaSingleNestedOptions","SchemaType","$exists","castToNumber","discriminator","geospatial","get","getConstructor","handleIdOption","internalToObjectOptions","Subdocument","module","exports","SingleNestedPath","schema","path","options","caster","_createConstructor","prototype","$basePath","$isSingleNested","call","Object","create","constructor","OptionsConstructor","baseClass","_embedded","SingleNested","value","parent","_this","$parent","apply","arguments","$session","ownerDocument","on","emit","val","isNew","proto","$__setSchema","events","toBSON","toObject","i","methods","statics","$conditionalHandlers","$geoWithin","handle$geoWithin","$geometry","castForQuery","$near","$nearSphere","cast$near","$within","cast$within","$geoIntersects","cast$geoIntersects","$minDistance","$maxDistance","cast","doc","init","priorVal","Array","isArray","Constructor","subdoc","parentSelected","selected","keys","reduce","obj","key","startsWith","substr","length","undefined","priorDoc","$conditional","handler","Error","runSetters","_applySetters","overrideStrict","strict","error","doValidate","fn","scope","skipSchemaValidators","validate","doValidateSync","schemaTypeError","validateSync","name","discriminators","defaultOptions","set","clone","assign","schematype","validators","slice","requiredValidator"],"sources":["/Users/juliachu/Dropbox/CS/market/node_modules/mongoose/lib/schema/SingleNestedPath.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst EventEmitter = require('events').EventEmitter;\nconst ObjectExpectedError = require('../error/objectExpected');\nconst SchemaSingleNestedOptions = require('../options/SchemaSingleNestedOptions');\nconst SchemaType = require('../schematype');\nconst $exists = require('./operators/exists');\nconst castToNumber = require('./operators/helpers').castToNumber;\nconst discriminator = require('../helpers/model/discriminator');\nconst geospatial = require('./operators/geospatial');\nconst get = require('../helpers/get');\nconst getConstructor = require('../helpers/discriminator/getConstructor');\nconst handleIdOption = require('../helpers/schema/handleIdOption');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nlet Subdocument;\n\nmodule.exports = SingleNestedPath;\n\n/**\n * Single nested subdocument SchemaType constructor.\n *\n * @param {Schema} schema\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SingleNestedPath(schema, path, options) {\n  schema = handleIdOption(schema, options);\n\n  this.caster = _createConstructor(schema);\n  this.caster.path = path;\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype = Object.create(SchemaType.prototype);\nSingleNestedPath.prototype.constructor = SingleNestedPath;\nSingleNestedPath.prototype.OptionsConstructor = SchemaSingleNestedOptions;\n\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, baseClass) {\n  // lazy load\n  Subdocument || (Subdocument = require('../types/subdocument'));\n\n  const _embedded = function SingleNested(value, path, parent) {\n    const _this = this;\n\n    this.$parent = parent;\n    Subdocument.apply(this, arguments);\n\n    this.$session(this.ownerDocument().$session());\n\n    if (parent) {\n      parent.on('save', function() {\n        _this.emit('save', _this);\n        _this.constructor.emit('save', _this);\n      });\n\n      parent.on('isNew', function(val) {\n        _this.isNew = val;\n        _this.emit('isNew', val);\n        _this.constructor.emit('isNew', val);\n      });\n    }\n  };\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  _embedded.prototype = Object.create(proto);\n  _embedded.prototype.$__setSchema(schema);\n  _embedded.prototype.constructor = _embedded;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.events = new EventEmitter();\n  _embedded.prototype.toBSON = function() {\n    return this.toObject(internalToObjectOptions);\n  };\n\n  // apply methods\n  for (const i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (const i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n\n/*!\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\nSingleNestedPath.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val) {\n  return { $geometry: this.castForQuery(val.$geometry) };\n};\n\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype.$conditionalHandlers.$near =\nSingleNestedPath.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\n\nSingleNestedPath.prototype.$conditionalHandlers.$within =\nSingleNestedPath.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\n\nSingleNestedPath.prototype.$conditionalHandlers.$geoIntersects =\n  geospatial.cast$geoIntersects;\n\nSingleNestedPath.prototype.$conditionalHandlers.$minDistance = castToNumber;\nSingleNestedPath.prototype.$conditionalHandlers.$maxDistance = castToNumber;\n\nSingleNestedPath.prototype.$conditionalHandlers.$exists = $exists;\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nSingleNestedPath.prototype.cast = function(val, doc, init, priorVal) {\n  if (val && val.$isSingleNested && val.parent === doc) {\n    return val;\n  }\n\n  if (val != null && (typeof val !== 'object' || Array.isArray(val))) {\n    throw new ObjectExpectedError(this.path, val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n\n  let subdoc;\n\n  // Only pull relevant selected paths and pull out the base path\n  const parentSelected = get(doc, '$__.selected', {});\n  const path = this.path;\n  const selected = Object.keys(parentSelected).reduce((obj, key) => {\n    if (key.startsWith(path + '.')) {\n      obj[key.substr(path.length + 1)] = parentSelected[key];\n    }\n    return obj;\n  }, {});\n\n  if (init) {\n    subdoc = new Constructor(void 0, selected, doc);\n    subdoc.init(val);\n  } else {\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, selected, doc, undefined, { priorDoc: priorVal });\n    }\n\n    return new Constructor(val, selected, doc, undefined, { priorDoc: priorVal });\n  }\n\n  return subdoc;\n};\n\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\nSingleNestedPath.prototype.castForQuery = function($conditional, val, options) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (val == null) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n  const overrideStrict = options != null && options.strict != null ?\n    options.strict :\n    void 0;\n\n  try {\n    val = new Constructor(val, overrideStrict);\n  } catch (error) {\n    // Make sure we always wrap in a CastError (gh-6803)\n    if (!(error instanceof CastError)) {\n      throw new CastError('Embedded', val, this.path, error, this);\n    }\n    throw error;\n  }\n  return val;\n};\n\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\nSingleNestedPath.prototype.doValidate = function(value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (options && options.skipSchemaValidators) {\n    if (!(value instanceof Constructor)) {\n      value = new Constructor(value, null, scope);\n    }\n    return value.validate(fn);\n  }\n\n  SchemaType.prototype.doValidate.call(this, value, function(error) {\n    if (error) {\n      return fn(error);\n    }\n    if (!value) {\n      return fn(null);\n    }\n\n    value.validate(fn);\n  }, scope, options);\n};\n\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\nSingleNestedPath.prototype.doValidateSync = function(value, scope, options) {\n  if (!options || !options.skipSchemaValidators) {\n    const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n    if (schemaTypeError) {\n      return schemaTypeError;\n    }\n  }\n  if (!value) {\n    return;\n  }\n  return value.validateSync();\n};\n\n/**\n * Adds a discriminator to this single nested subdocument.\n *\n * ####Example:\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shape: shapeSchema });\n *\n *     const singleNestedPath = parentSchema.path('shape');\n *     singleNestedPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {String} [value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @see discriminators /docs/discriminators.html\n * @api public\n */\n\nSingleNestedPath.prototype.discriminator = function(name, schema, value) {\n  schema = discriminator(this.caster, name, schema, value);\n\n  this.caster.discriminators[name] = _createConstructor(schema, this.caster);\n\n  return this.caster.discriminators[name];\n};\n\n/**\n * Sets a default option for all SingleNestedPath instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Embedded.set('required', true);\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSingleNestedPath.defaultOptions = {};\n\nSingleNestedPath.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.schema, this.path, options);\n  schematype.validators = this.validators.slice();\n  if (this.requiredValidator !== undefined) {\n    schematype.requiredValidator = this.requiredValidator;\n  }\n  schematype.caster.discriminators = Object.assign({}, this.caster.discriminators);\n  return schematype;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}